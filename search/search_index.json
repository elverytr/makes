{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>A software supply chain framework powered by Nix.</p> <p></p>"},{"location":"#why","title":"Why","text":"<p>Ever needed to</p> <ul> <li>run applications locally     to try out your code;</li> <li>execute CI/CD pipelines locally     to make sure jobs are being passed;</li> <li>keep execution environments frozen     for strict dependency control     against supply chain attacks;</li> <li>know the exact dependency tree of your application.</li> </ul> <p>Well, we have!</p>"},{"location":"#what","title":"What","text":"<p>Makes is an open-source, production-ready framework for building CI/CD pipelines and application environments.</p> <p>It is</p> Attribute Description Cryptographically signed dependencies for apps and CI/CD pipelines Can be installed with just one command and has dozens of generic CI/CD builtins Supports a distributed and completely granular cache Runs on Docker, VMs, and any Linux-based OS can be extended to work with any technology"},{"location":"architecture/","title":"Architecture","text":"<p>Below you will find a high-level diagram of the Makes architecture</p> <pre><code>flowchart TB\n\n  ci_cd_code[CI/CD as code]\n  git_repo[Git Repository]\n  inputs[Other inputs]\n  project[Project]\n\n  subgraph human[Interested Parties]\n    consumer[Consumer]\n    developer[Developer]\n  end\n\n  subgraph build[Hermetic and Reproducible Builds]\n    nix[Nix Package Manager]\n    nix_derivation[Nix Derivation SBOM]\n    nix_store_path[Nix Store Path - Built artifact]\n    nixpkgs_collection[Nixpkgs Collection]\n    nixpkgs_module_system[Module System]\n  end\n\n  subgraph makes[Makes]\n    makes_cli[Makes CLI]\n    makes_framework[Makes Framework]\n  end\n\n  subgraph slsa[Supply Chain Security]\n    slsa_provenance[SLSA Provenance Attestation]\n  end\n\n  consumer -- uses --&gt; makes_cli\n  ci_cd_code -- uses --&gt; makes_framework\n  ci_cd_code -- uses --&gt; nixpkgs_collection\n  ci_cd_code -- uses --&gt; inputs\n  developer -- uses --&gt; makes_cli\n  developer -- maintains --&gt; project\n  git_repo -- is fetched by --&gt; makes_cli\n  git_repo -- contains --&gt; ci_cd_code\n  makes_cli -- produces --&gt; slsa_provenance\n  makes_cli -- uses --&gt; nix\n  makes_framework -- uses --&gt; nixpkgs_module_system\n  inputs -- is fetched by --&gt; nix\n  nixpkgs_collection -- is fetched by --&gt; nix\n  nixpkgs_module_system -- is fetched by --&gt; nix\n  nix -- produces --&gt; nix_derivation\n  nix -- produces --&gt; nix_store_path\n  project -- has --&gt; git_repo</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<ul> <li>Bug reports: here</li> <li>Feature requests: here</li> <li>Give us a star: here</li> <li>Feedback: here</li> </ul>"},{"location":"contributing/#code-contributions","title":"Code contributions","text":"<p>We accept anything that benefits the community, thanks for sharing your work with the world. We can discuss implementation details here.</p> <ol> <li>Write your idea: here</li> <li>Fork Makes on GitHub</li> <li>Git-clone your fork</li> <li>Hack as much as you like!</li> <li>Git-commit your changes.</li> <li>Git-push changes to your fork</li> <li>Create a Pull Request from your fork to Makes</li> </ol> <p>Guidelines:</p> <ul> <li>Keep it simple</li> <li>Remember we write code for humans, not machines</li> <li>Write an argument: <code>/src/args</code></li> <li>Write a module (if applies): <code>/src/evaluator/modules</code></li> <li>Write docs: <code>/README.md</code> or <code>/docs</code></li> <li>Write a test: <code>/makes.nix</code> or <code>/makes/**/main.nix</code></li> <li>Write a test GitHub workflow: <code>/.github/workflows/dev.yml</code></li> </ul> <p>Examples:</p> <ul> <li>feat(build): #262 lint git mailmap</li> <li>feat(build): #232 lint terraform</li> <li>feat(build): #232 test terraform</li> <li>feat(build): #232 deploy terraform</li> <li>feat(build): #252 aws secrets from env</li> <li>feat(build): #232 make parallel utils</li> </ul>"},{"location":"contributing/#the-legal-side-of-contributions","title":"The legal side of contributions","text":"<p>All of the code that you submit to our code repository will be licensed under the MIT license.</p> <p>Please add a <code>Signed-off-by: Full Name &lt;email&gt;</code> to your commits as explained here to signal that you agree to the terms of the following Developer Certificate of Origin.</p> <p>Thank you!</p>"},{"location":"contributing/#review-process","title":"Review process","text":"<p>Once a pull request is opened in the repository, a maintainer must follow the following steps to review it:</p> <ol> <li>Check that the proposed change has an associated issue,     enough discussion has happened on it,     and there is consensus in the implementation details,     and if we agree that implement it is a good idea.</li> <li>Check if the change modifies the Architecture     in any way, and that it has been updated.</li> <li>Check if the implementation follows the     Secure Design Principles,     and documents there     any new interactions,     or updates the documentation accordingly.</li> <li>Check if the implementation introduces new threats,     or changes/removes an existing threat,     and if the Threat Model     documentation has been updated to reflect it.</li> <li>Check if the change adds or modifies     an existing security property of the system,     and if the Software Assurance     documentation has been updated to reflect it.</li> <li>Check if the CI/CD succeeded.     No job should fail     unless something unrelated to the pull request happened.</li> <li>The Developer Certificate of Origin was accepted,     normally through checking     that the job in the CI/CD that verifies it succeeded.</li> <li>The steps mentioned in the sections above were followed,     particularly check if the code is readable,     maintainable,     proper tests were added or updated,     the corresponding docs were added or updated,     and the architecture and design seems to be of good quality.</li> </ol>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<ol> <li> <p>Install Nix.</p> Tip <p>We recommend getting the Single-user installation if you're new to Nix.</p> </li> <li> <p>Install Makes:</p> <pre><code>nix-env -if https://github.com/fluidattacks/makes/archive/23.04.tar.gz\n</code></pre> </li> </ol>"},{"location":"getting-started/#usage","title":"Usage","text":""},{"location":"getting-started/#using-the-cli","title":"Using the CLI","text":"<p>The Makes command has the following syntax:</p> <pre><code>m &lt;repo&gt; &lt;job&gt;\n</code></pre> <p>where:</p> <ul> <li><code>&lt;repo&gt;</code> is a GitHub, GitLab or local repository.</li> <li><code>&lt;job&gt;</code> is a Makes job     that exists within the referenced repository.     If no job is specified,     Makes displays all available jobs.</li> </ul> <p>Example:</p> GitHubGitLabLocal <pre><code>m github:fluidattacks/makes@main\n</code></pre> <pre><code>m gitlab:fluidattacks/makes-example-2@main\n</code></pre> <pre><code>m /path/to/local/repo\n</code></pre> <p>Makes is powered by Nix. This means that it is able to run on any of the Nix's supported platforms.</p> <p>We have thoroughly tested it in x86_64 hardware architectures running Linux and MacOS (darwin) machines.</p>"},{"location":"getting-started/#using-the-container","title":"Using the container","text":"<p>A Makes container can be found in the container registry.</p> <p>You can use it to run Makes on any service that supports containers, including most CI/CD providers.</p> <p>Example:</p> GitHub ActionsGitLab CITravis CI <pre><code># .github/workflows/dev.yml\nname: Makes CI\non: [push, pull_request]\njobs:\nhelloWorld:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@f095bcc56b7c2baf48f3ac70d6d6782f4f553222\n- uses: docker://ghcr.io/fluidattacks/makes/amd64:23.04\nname: helloWorld\nwith:\nargs: m . /helloWorld 1 2 3\n</code></pre> <pre><code># .gitlab-ci.yml\n/helloWorld:\nimage: ghcr.io/fluidattacks/makes/amd64:23.04\nscript:\n- m . /helloWorld 1 2 3\n</code></pre> <pre><code># .travis.yml\nos: linux\nlanguage: nix\nnix: 2.3.12\ninstall: nix-env -if https://github.com/fluidattacks/makes/archive/23.04.tar.gz\njobs:\ninclude:\n- script: m . /helloWorld 1 2 3\n</code></pre>"},{"location":"getting-started/#importing-via-nix","title":"Importing via Nix","text":"<p>You can also import Makes from Nix:</p> <pre><code>let\n# Import the framework\nmakes = import \"${builtins.fetchGit {\nurl = \"https://github.com/fluidattacks/makes\";\nref = \"refs/tags/23.04\";\nrev = \"\"; # Add a commit here\n}}/src/args/agnostic.nix\" { };\nin\n# Use the framework\nmakes.makePythonPypiEnvironment {\nname = \"example\";\nsourcesYaml = ./sources.yaml;\n}\n</code></pre> <p>Most functions documented in the api/extensions section are available.</p> <p>For a detailed list check out Makes' agnostic args.</p>"},{"location":"getting-started/#want-to-get-your-hands-dirty","title":"Want to get your hands dirty?","text":"<p>Jump right into our hands-on example!</p>"},{"location":"governance/","title":"Governance","text":"<p>Decisions, approvals, code reviews, etc, are made by the project maintainers:</p> <ul> <li>Kevin Amado - @kamadorueda</li> <li>Daniel Salazar - @dsalaza4</li> <li>Jhon Perez - @jpverde</li> </ul> <p>Discussions usually happen within the issues section.</p>"},{"location":"versioning/","title":"Versioning scheme","text":"<p>We use calendar versioning for stable releases.</p> <p>Versioning is the same for both GitHub tags and Containers.</p> <p>You can find the full list of versions in the GitHub releases page.</p> <p>The Makes ecosystem has two components: the framework itself, and the CLI (a.k.a. <code>$ m</code>).</p>"},{"location":"versioning/#stable-releases","title":"Stable releases","text":"<p>Stable releases are the ones that do not have the <code>Pre-release</code> label. they are frozen. We don't touch them under any circumstances.</p>"},{"location":"versioning/#unstable-releases","title":"Unstable releases","text":"<p>Unstable releases are the ones that do have the <code>Pre-release</code> label. These releases have the latest Makes features but can also come with breaking changes or bugs.</p>"},{"location":"versioning/#versioning-scheme-for-the-framework","title":"Versioning scheme for the framework","text":"<p>You can ensure that your project is always evaluated with the same version of Makes by creating a <code>makes.lock.nix</code> in the root of your project, for instance:</p> <pre><code># /path/to/my/project/makes.lock.nix\n{\nmakesSrc = builtins.fetchGit {\nurl = \"https://github.com/fluidattacks/makes\";\nref = \"refs/tags/23.04\";\nrev = \"\"; # Add a commit here\n};\n}\n</code></pre>"},{"location":"versioning/#compatibility-information","title":"Compatibility information","text":"<p>For the whole ecosystem to work you need to use the same version of the framework and the CLI. For example: <code>23.04</code>.</p>"},{"location":"api/builtins/","title":"Introduction","text":"<p>A Makes project is identified by a <code>makes.nix</code> file in the top level directory.</p> <p>A <code>makes.nix</code> file should be:</p> <ul> <li> <p>An attribute set of configuration options:</p> <pre><code>{\nconfigOption1 = {\n# ...\n};\nconfigOption2 = {\n# ...\n};\n}\n</code></pre> </li> <li> <p>A function that receives one or more arguments   and returns an attribute set of configuration options:</p> <pre><code>{\n  argA,\n  argB,\n...\n}: {\nconfigOption1 = {\n# ...\n};\nconfigOption2 = {\n# ...\n};\n}\n</code></pre> </li> </ul> <p>In the next sections we document all configuration options you can tweak in a <code>makes.nix</code>.</p>"},{"location":"api/builtins/database/","title":"Database","text":""},{"location":"api/builtins/database/#dynamodb","title":"dynamoDb","text":"<p>Create local dynamo databases</p> <p>Types:</p> <ul> <li>dynamoDb (<code>attrsOf targetType</code>): Optional.     Mapping of names to multiple databases.     Defaults to <code>{ }</code>.</li> <li>targetType (<code>submodule</code>):<ul> <li>name (<code>str</code>),</li> <li>host (<code>str</code>): Optional, defaults to <code>127.0.0.1</code>.</li> <li>port (<code>str</code>): Optional, defaults to <code>8022</code>.</li> <li>infra (<code>str</code>): Optional. Absolute path to the directory containing the     terraform infrastructure.</li> <li>daemonMode (<code>boolean</code>): Optional, defaults to <code>false</code>.</li> <li>data (<code>listOf str</code>): Optional, defaults to []. Absolute paths with json documents,     with the format defined for     BatchWriteItem.</li> <li>dataDerivation (<code>listOf package</code>): Optional, defaults to <code>[]</code>.     Derivations where the output ($ out), are json documents,     with the format defined for     BatchWriteItem.     This is useful if you want to perform transformations on your data.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\n  projectPath,\n...\n}: {\ndynamoDb = {\nusersdb = {\nhost = \"localhost\";\ninfra = projectPath \"/test/database/infra\";\ndata = [\n        projectPath \"/test/database/data\"\n];\ndaemonMode = true;\n};\n};\n}\n</code></pre> <pre><code>DAEMON=false m . /dyanmoDb/usersdb\n</code></pre> <p>The following variables are available:</p> <ul> <li>HOST</li> <li>PORT</li> <li>DAEMON</li> <li>POPULATE</li> </ul>"},{"location":"api/builtins/deploy/","title":"Deploy","text":""},{"location":"api/builtins/deploy/#computeonawsbatch","title":"computeOnAwsBatch","text":"<p>Submit a job to a AWS BATCH queue.</p> <p>Types:</p> <ul> <li>computeOnAwsBatch (<code>attrsOf jobType</code>): Optional.     Job groups to submit.     Defaults to <code>{ }</code>.</li> <li>jobType (<code>submodule</code>):<ul> <li>allowDuplicates (<code>bool</code>): Optional.     Set to <code>false</code> in order to prevent submitting the job     if there is already a job in the queue with the same name.     Defaults to <code>false</code>.</li> <li>attempts (<code>ints.positive</code>): Optional.     If the value of attempts is greater than one,     the job is retried on failure the same number of attempts as the value.     Defaults to <code>1</code>.</li> <li>attemptDurationSeconds (<code>ints.positive</code>): Optional.     The time duration in seconds     (measured from the job attempt's startedAt timestamp)     after which Batch terminates your jobs     if they have not finished.</li> <li>command (<code>listOf str</code>):     The command to send to the container.     It overrides the one specified     in the Batch job definition.     Additional arguments can be propagated when running this module output.</li> <li>definition (<code>str</code>):     Name of the Batch job definition     that we will use as base for submitting the job.     In general an Batch job definition is required     in order to specify which container image     our job is going to run on.</li> <li>environment (<code>listOf str</code>): Optional.     Name of the environment variables     whose names and values should be copied from the machine running Makes     to the machine on Batch running the job.     Defaults to <code>[ ]</code>.</li> <li>includePositionalArgsInName (<code>bool</code>): Optional.     Enable to make positional arguments part of the job name.     This is useful for identifying jobs     in the Batch console     more easily.     Defaults to <code>true</code>.</li> <li>memory (<code>ints.positive</code>):     Amount of memory, in MiB that is reserved for the job.</li> <li>parallel (<code>ints.positive</code>): Optional.     Number of parallel jobs to trigger using     Batch Array Jobs.</li> <li>propagateTags (<code>bool</code>): Optional.     Enable tags to be propagated into the ECS tasks.     Defaults to <code>true</code>.</li> <li>queue (<code>nullOr str</code>):     Name of the Batch queue we should submit the job to.     It can be set to <code>null</code>,     causing Makes to read     the <code>MAKES_COMPUTE_ON_AWS_BATCH_QUEUE</code> environment variable at runtime.</li> <li>setup (<code>listOf package</code>):     Makes Environment     or Makes Secrets     to <code>source</code> (as in Bash's <code>source</code>)     before anything else.     Defaults to <code>[ ]</code>.</li> <li>tags (<code>attrsOf str</code>): Optional.     Tags to apply to the batch job.     Defaults to <code>{ }</code>.</li> <li>vcpus (<code>ints.positive</code>):     Amount of virtual CPUs that is reserved for the job.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\n  outputs,\n...\n}: {\ncomputeOnAwsBatch = {\nhelloWorld = {\nattempts = 1;\nattemptDurationSeconds = 43200;\ncommand = [ \"m\" \"github:fluidattacks/makes@main\" \"/helloWorld\" ];\ndefinition = \"makes\";\nenvironment = [ \"ENV_VAR_FOR_WHATEVER\" ];\nmemory = 1800;\nqueue = \"ec2_spot\";\nsetup = [\n# Use default authentication for AWS\n        outputs.\"/secretsForAwsFromEnv/__default__\"\n];\ntags = {\n\"Management:Product\" = \"awesome_app\";\n}\nvcpus = 1;\n};\n};\n}\n</code></pre> <pre><code>m . /computeOnAwsBatch/helloWorld 1 2 3\n</code></pre> <p>Note that positional arguments (<code>[ \"1\" \"2\" \"3\" ]</code> in this case) will be appended to the end of <code>command</code> before sending the job to Batch.</p>"},{"location":"api/builtins/deploy/#deploycontainerimage","title":"deployContainerImage","text":"<p>Deploy a set of container images in OCI Format to the specified container registries.</p> <p>For details on how to build container images in OCI Format please read the <code>makeContainerImage</code> reference.</p> <p>Types:</p> <ul> <li>deployContainerImage:<ul> <li>images (<code>attrsOf imageType</code>): Optional.     Definitions of container images to deploy.     Defaults to <code>{ }</code>.</li> </ul> </li> <li>imageType (<code>submodule</code>):<ul> <li>attempts (<code>ints.positive</code>): Optional.     If the value of attempts is greater than one,     the job is retried on failure the same number of attempts as the value.     Defaults to <code>1</code>.</li> <li>credentials:<ul> <li>token (<code>str</code>):     Name of the environment variable     that stores the value of the registry token.</li> <li>user (<code>str</code>):     Name of the environment variable     that stores the value of the registry user.</li> </ul> </li> <li>registry (<code>str</code>):     Registry in which the image will be copied to.</li> <li>setup (<code>listOf package</code>): Optional.     Makes Environment     or Makes Secrets     to <code>source</code> (as in Bash's <code>source</code>)     before anything else.     Defaults to <code>[ ]</code>.</li> <li>sign (<code>bool</code>): Optional.     Sign container image     with Cosign     by using a     OIDC keyless approach.     Defaults to <code>false</code>.</li> <li>src (<code>package</code>):     Derivation that contains the container image in OCI Format.</li> <li>tag (<code>str</code>):     The tag under which the image will be stored in the registry.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation DockerHubInvocation GitHubInvocation GitLab <pre><code>{\n  inputs,\n  outputs,\n...\n}: {\ninputs = {\nnixpkgs = fetchNixpkgs {\nrev = \"f88fc7a04249cf230377dd11e04bf125d45e9abe\";\nsha256 = \"1dkwcsgwyi76s1dqbrxll83a232h9ljwn4cps88w9fam68rf8qv3\";\n};\n};\ndeployContainerImage = {\nimages = {\nnginxDockerHub = {\ncredentials = {\ntoken = \"DOCKER_HUB_PASS\";\nuser = \"DOCKER_HUB_USER\";\n};\nsrc = inputs.nixpkgs.dockerTools.examples.nginx;\nsign = false;\nregistry = \"docker.io\";\ntag = \"fluidattacks/nginx:latest\";\n};\nredisGitHub = {\ncredentials = {\ntoken = \"GITHUB_TOKEN\";\nuser = \"GITHUB_ACTOR\";\n};\nsrc = inputs.nixpkgs.dockerTools.examples.redis;\nsign = true;\nregistry = \"ghcr.io\";\ntag = \"fluidattacks/redis:$(date +%Y.%m)\"; # Tag from command\n};\nmakesGitLab = {\ncredentials = {\ntoken = \"CI_REGISTRY_PASSWORD\";\nuser = \"CI_REGISTRY_USER\";\n};\nsrc = outputs.\"/containerImage\";\nsign = false;\nregistry = \"registry.gitlab.com\";\ntag = \"fluidattacks/product/makes:$MY_VAR\"; # Tag from env var\n};\n};\n};\n}\n</code></pre> <pre><code>DOCKER_HUB_USER=user DOCKER_HUB_PASS=123 m . /deployContainerImage/nginxDockerHub\n</code></pre> <pre><code>GITHUB_ACTOR=user GITHUB_TOKEN=123 m . /deployContainerImage/makesLatest\n</code></pre> <pre><code>CI_REGISTRY_USER=user CI_REGISTRY_PASSWORD=123 m . /deployContainerImage/makesGitLab\n</code></pre>"},{"location":"api/builtins/deploy/#deployterraform","title":"deployTerraform","text":"<p>Deploy Terraform code by performing a <code>terraform apply</code> over the specified Terraform modules.</p> <p>Types:</p> <ul> <li>deployTerraform:<ul> <li>modules (<code>attrsOf moduleType</code>): Optional.     Path to Terraform modules to lint.     Defaults to <code>{ }</code>.</li> </ul> </li> <li>moduleType (<code>submodule</code>):<ul> <li>setup (<code>listOf package</code>): Optional.     Makes Environment     or Makes Secrets     to <code>source</code> (as in Bash's <code>source</code>)     before anything else.     Defaults to <code>[ ]</code>.</li> <li>src (<code>str</code>):     Path to the Terraform module.</li> <li>version (<code>enum [ \"0.14\" \"0.15\" \"1.0\" ]</code>):     Terraform version your module is built with.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\ndeployTerraform = {\nmodules = {\nmodule1 = {\nsrc = \"/my/module1\";\nversion = \"0.14\";\n};\nmodule2 = {\nsrc = \"/my/module2\";\nversion = \"1.0\";\n};\n};\n};\n}\n</code></pre> <pre><code>m . /deployTerraform/module1\n</code></pre>"},{"location":"api/builtins/deploy/#taintterraform","title":"taintTerraform","text":"<p>Taint Terraform code by performing a <code>terraform taint $resource</code> over the specified Terraform modules.</p> <p>Types:</p> <ul> <li>taintTerraform:<ul> <li>modules (<code>attrsOf moduleType</code>): Optional.     Path to Terraform modules to lint.     Defaults to <code>{ }</code>.</li> </ul> </li> <li>moduleType (<code>submodule</code>):<ul> <li>reDeploy (<code>bool</code>): Optional.     Perform a <code>terraform apply</code> after tainting resources.     Defaults to <code>false</code>.</li> <li>resources (<code>listOf str</code>):     Resources to taint.</li> <li>setup (<code>listOf package</code>): Optional.     Makes Environment     or Makes Secrets     to <code>source</code> (as in Bash's <code>source</code>)     before anything else.     Defaults to <code>[ ]</code>.</li> <li>src (<code>str</code>):     Path to the Terraform module.</li> <li>version (<code>enum [ \"0.14\" \"0.15\" \"1.0\" ]</code>):     Terraform version your module is built with.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\ntaintTerraform = {\nmodules = {\nmodule = {\nresources = [ \"null_resource.example\" ];\nsrc = \"/test/terraform/module\";\nversion = \"0.14\";\n};\n};\n};\n}\n</code></pre> <pre><code>m . /taintTerraform/module\n</code></pre>"},{"location":"api/builtins/deploy/#deploynomad","title":"deployNomad","text":"<p>Deploy Nomad code by performing a <code>nomad plan</code> over the specified Nomad jobs / namespaces.</p> <p>Types:</p> <ul> <li>deployNomad:<ul> <li>jobs (<code>attrsOf jobsType</code>): Optional.     Path to Nomad jobs to deploy.     Defaults to <code>{ }</code>.</li> <li>namespaces (<code>attrsOf namespacesType</code>): Optional.     Path to Nomad namespaces to deploy.     Defaults to <code>{ }</code>.</li> </ul> </li> <li>jobsType (<code>submodule</code>):<ul> <li>setup (<code>listOf package</code>): Optional.     Makes Environment     or Makes Secrets     to <code>source</code> (as in Bash's <code>source</code>)     before anything else.     Defaults to <code>[ ]</code>.</li> <li>src (<code>path</code>):     Path to the Nomad job (hcl or json).</li> <li>version (<code>enum [ \"1.0\" \"1.1\" ]</code>):     Nomad version your job is built with.     Defaults to <code>\"1.1\"</code>.</li> <li>namespace (<code>str</code>):     Nomad namespace to deploy the job into.</li> </ul> </li> <li>namespacesType (<code>submodule</code>):<ul> <li>setup (<code>listOf package</code>): Optional.     Makes Environment     or Makes Secrets     to <code>source</code> (as in Bash's <code>source</code>)     before anything else.     Defaults to <code>[ ]</code>.</li> <li>jobs (<code>attrOf path</code>):     Attributes of path to the Nomad jobs (hcl or json).</li> <li>version (<code>enum [ \"1.0\" \"1.1\" ]</code>):     Nomad version your jobs are built with.     Defaults to <code>\"1.1\"</code>.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\ndeployNomad = {\njobs = {\njob1 = {\nsrc = ./my/job1.hcl;\nnamespace = \"default\";\n};\njob2 = {\nsrc = ./my/job2.json;\nnamespace = \"default\";\n};\n};\nnamespaces = {\n      dev.jobs = {\njob1 = ./my/dev/job1.hcl;\njob2 = ./my/dev/job2.json;\n};\n      staging.jobs = {\njob1 = ./my/staging/job1.hcl;\njob2 = ./my/staging/job2.json;\n};\n};\n};\n}\n</code></pre> <pre><code>m . /deployNomad/default/job1\n</code></pre>"},{"location":"api/builtins/development/","title":"Development","text":""},{"location":"api/builtins/development/#dev","title":"dev","text":"<p>Create declarative development environments.</p> <p>Can be used with direnv to make your shell automatically load the development environment and its required dependencies.</p> <p>Types:</p> <ul> <li>dev (<code>attrsOf (asIn makeSearchPaths)</code>): Optional.     Mapping of environment name to searchPaths.     Defaults to <code>{ }</code>.</li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\n  inputs,\n...\n}: {\ninputs = {\nnixpkgs = fetchNixpkgs {\nrev = \"f88fc7a04249cf230377dd11e04bf125d45e9abe\";\nsha256 = \"1dkwcsgwyi76s1dqbrxll83a232h9ljwn4cps88w9fam68rf8qv3\";\n};\n};\ndev = {\nexample = {\n# A development environment with `hello` package\nbin = [\n        inputs.nixpkgs.hello\n      ];\n};\n};\n}\n</code></pre> <pre><code>m . /dev/example\n</code></pre> <p>Example usage with direnv:</p> On a remote projectOn a local project <pre><code>$ cat /path/to/some/dir/.envrc\n\nsource \"$(m github:fluidattacks/makes@main /dev/example)/template\"\n# Now every time you enter /path/to/some/dir\n# the shell will automatically load the environment\n$ cd /path/to/some/dir\n\ndirenv: loading /path/to/some/dir/.envrc\n    direnv: export ~PATH\n\n/path/to/some/dir $ hello\n\nHello, world!\n\n# If you exit the directory, the development environment is unloaded\n/path/to/some/dir $ cd ..\n\ndirenv: unloading\n\n/path/to/some $ hello\n\nhello: command not found\n</code></pre> <pre><code>$ cat /path/to/some/dir/.envrc\n\ncd /path/to/my/project\n    source \"$(m . /dev/example)/template\"\n# Now every time you enter /path/to/some/dir\n# the shell will automatically load the environment\n$ cd /path/to/some/dir\n\ndirenv: loading /path/to/some/dir/.envrc\n    direnv: export ~PATH\n\n/path/to/some/dir $ hello\n\nHello, world!\n\n# If you exit the directory, the development environment is unloaded\n/path/to/some/dir $ cd ..\n\ndirenv: unloading\n\n/path/to/some $ hello\n\nhello: command not found\n</code></pre>"},{"location":"api/builtins/environment/","title":"Environment","text":""},{"location":"api/builtins/environment/#envvars","title":"envVars","text":"Warning <p>Do not propagate sensitive information here, it's not safe. Use Makes Secrets instead.</p> <p>Allows you to map environment variables from a name to a value.</p> <p>Types:</p> <ul> <li> <p>envVars (<code>attrsOf (attrsOf str)</code>): Optional.</p> <p>Defaults to <code>{ }</code>.</p> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\n  inputs,\n  outputs,\n...\n}: {\nenvVars = {\nexample = {\n# Equals to: export awsDefaultRegion=us-east-1\nawsDefaultRegion = \"us-east-1\";\n};\notherExample = {\n# Equals to: export license=/nix/store/...-my-license\nlicense = outputs.\"/MyLicense\";\n# Equals to: export bash=/nix/store/...-bash\nbash = inputs.nixpkgs.bash;\n};\n};\ninputs = {\nnixpkgs = fetchNixpkgs {\nrev = \"f88fc7a04249cf230377dd11e04bf125d45e9abe\";\nsha256 = \"1dkwcsgwyi76s1dqbrxll83a232h9ljwn4cps88w9fam68rf8qv3\";\n};\n};\n}\n</code></pre> <pre><code>m . /envVars/example\n</code></pre>"},{"location":"api/builtins/environment/#envvarsforterraform","title":"envVarsForTerraform","text":"Warning <p>Do not propagate sensitive information here, it's not safe. Use Makes Secrets instead.</p> <p>Allows you to map Terraform variables from a name to a value.</p> <p>Types:</p> <ul> <li> <p>envVarsForTerraform (<code>attrsOf (attrsOf str)</code>): Optional.</p> <p>Defaults to <code>{ }</code>.</p> </li> </ul> <p>Example:</p> makes.nixmain.tfInvocation <pre><code>{\n  inputs,\n  outputs,\n...\n}: {\nenvVarsForTerraform = {\nexample = {\n# Equals to: export TF_VAR_awsDefaultRegion=us-east-1\nawsDefaultRegion = \"us-east-1\";\n};\notherExample = {\n# Equals to: export TF_VAR_license=/nix/store/...-my-license\nlicense = outputs.\"/MyLicense\";\n# Equals to: export TF_VAR_bash=/nix/store/...-bash\nbash = inputs.nixpkgs.bash;\n};\n};\ninputs = {\nnixpkgs = fetchNixpkgs {\nrev = \"f88fc7a04249cf230377dd11e04bf125d45e9abe\";\nsha256 = \"1dkwcsgwyi76s1dqbrxll83a232h9ljwn4cps88w9fam68rf8qv3\";\n};\n};\n}\n</code></pre> <pre><code>variable \"awsDefaultRegion\" {}\n</code></pre> <pre><code>m . /envVarsForTerraform/example\n</code></pre>"},{"location":"api/builtins/examples/","title":"Examples","text":""},{"location":"api/builtins/examples/#helloworld","title":"helloWorld","text":"<p>Small command for demo purposes, it greets the specified user:</p> <p>Types:</p> <ul> <li>helloWorld:<ul> <li>enable (<code>boolean</code>): Optional.     Defaults to <code>false</code>.</li> <li>name (<code>string</code>):     Name of the user we should greet.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nhelloWorld = {\nenable = true;\nname = \"Jane Doe\";\n};\n}\n</code></pre> <pre><code>m . /helloWorld 1 2 3\n</code></pre>"},{"location":"api/builtins/format/","title":"Format","text":"<p>Formatters help your code be consistent, beautiful and more maintainable.</p>"},{"location":"api/builtins/format/#formatbash","title":"formatBash","text":"<p>Ensure that Bash code is formatted according to shfmt.</p> <p>Types:</p> <ul> <li>formatBash:<ul> <li>enable (<code>boolean</code>): Optional.     Defaults to false.</li> <li>targets (<code>listOf str</code>): Optional.     Files or directories (relative to the project) to format.     Defaults to the entire project.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nformatBash = {\nenable = true;\ntargets = [\n\"/\" # Entire project\n\"/file.sh\" # A file\n\"/directory\" # A directory within the project\n];\n};\n}\n</code></pre> <pre><code>m . /formatBash\n</code></pre>"},{"location":"api/builtins/format/#formatmarkdown","title":"formatMarkdown","text":"Warning <p>This function is only available on Linux at the moment.</p> <p>Ensure that Markdown code is formatted according to doctoc.</p> <p>Types:</p> <ul> <li>formatMarkdown:<ul> <li>enable (<code>boolean</code>): Optional.     Defaults to <code>false</code>.</li> <li>doctocArgs (<code>listOf str</code>): Optional.     Extra CLI flags to propagate to doctoc.     Defaults to <code>[ ]</code>.</li> <li>targets (<code>listOf str</code>):     File  s (relative to the project) to format.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nformatMarkdown = {\nenable = true;\ndoctocArgs = [ \"--title\" \"# Contents\" ];\ntargets = [ \"/README.md\" ];\n};\n}\n</code></pre> <pre><code>m . /formatMarkdown\n</code></pre>"},{"location":"api/builtins/format/#formatnix","title":"formatNix","text":"<p>Ensure that Nix code is formatted according to Alejandra.</p> <p>Types:</p> <ul> <li>formatNix:<ul> <li>enable (<code>boolean</code>): Optional.     Defaults to <code>false</code>.</li> <li>targets (<code>listOf str</code>): Optional.     Files or directories (relative to the project) to format.     Defaults to the entire project.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nformatNix = {\nenable = true;\ntargets = [\n\"/\" # Entire project\n\"/file.nix\" # A file\n\"/directory\" # A directory within the project\n];\n};\n}\n</code></pre> <pre><code>m . /formatNix\n</code></pre>"},{"location":"api/builtins/format/#formatpython","title":"formatPython","text":"<p>Ensure that Python code is formatted according to Black and isort.</p> <p>Types:</p> <ul> <li>formatPython:<ul> <li>enable (<code>boolean</code>): Optional.     Defaults to <code>false</code>.</li> <li>targets (<code>listOf str</code>): Optional.     Files or directories (relative to the project) to format.     Defaults to the entire project.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nformatPython = {\nenable = true;\ntargets = [\n\"/\" # Entire project\n\"/file.py\" # A file\n\"/directory\" # A directory within the project\n];\n};\n}\n</code></pre> <pre><code>m . /formatPython\n</code></pre>"},{"location":"api/builtins/format/#formatterraform","title":"formatTerraform","text":"<p>Ensure that Terraform code is formatted according to Terraform FMT.</p> <p>Types:</p> <ul> <li>formatTerraform:<ul> <li>enable (<code>boolean</code>): Optional.     Defaults to <code>false</code>.</li> <li>targets (<code>listOf str</code>): Optional.     Files or directories (relative to the project) to format.     Defaults to the entire project.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nformatTerraform = {\nenable = true;\ntargets = [\n\"/\" # Entire project\n\"/main.tf\" # A file\n\"/terraform/module\" # A directory within the project\n];\n};\n}\n</code></pre> <pre><code>m . /formatTerraform\n</code></pre>"},{"location":"api/builtins/format/#formatyaml","title":"formatYaml","text":"<p>Ensure that YAML code is formatted according to yamlfix.</p> <p>Types:</p> <ul> <li>formatYaml:<ul> <li>enable (<code>boolean</code>): Optional.     Defaults to <code>false</code>.</li> <li>targets (<code>listOf str</code>): Optional.     Files or directories (relative to the project) to format.     Defaults to the entire project.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nformatYaml = {\nenable = true;\ntargets = [\n\"/\" # Entire project\n\"/main.yaml\" # A file\n\"/yamls/\" # A directory within the project\n];\n};\n}\n</code></pre> <pre><code>m . /formatYaml\n</code></pre>"},{"location":"api/builtins/framework-configuration/","title":"Framework configuration","text":""},{"location":"api/builtins/framework-configuration/#extendingmakesdirs","title":"extendingMakesDirs","text":"<p>Paths to magic directories where Makes extensions will be loaded from.</p> <p>Types:</p> <ul> <li> <p>extendingMakesDirs (<code>listOf str</code>): Optional.</p> <p>Defaults to <code>[\"/makes\"]</code>.</p> </li> </ul> <p>Example:</p> makes.nix <pre><code>{\n# Look for main.nix files everywhere in the repo.\nextendingMakesDirs = [\"/\"];\n}\n</code></pre>"},{"location":"api/builtins/framework-configuration/#inputs","title":"inputs","text":"<p>Explicitly declare the inputs and sources for your project. Inputs can be anything.</p> <p>Types:</p> <ul> <li> <p>inputs (<code>attrOf anything</code>): Optional.</p> <p>Defaults to <code>{ }</code>.</p> </li> </ul> <p>Example:</p> makes.nix <pre><code>{\n  fetchNixpkgs,\n  fetchUrl,\n...\n}: {\ninputs = {\nlicense = fetchUrl {\nrev = \"https://raw.githubusercontent.com/fluidattacks/makes/1a595d8642ba98252cff7de3909fb879c54f8e59/LICENSE\";\nsha256 = \"11311l1apb1xvx2j033zlvbyb3gsqblyxq415qwdsd0db1hlwd52\";\n};\nnixpkgs = fetchNixpkgs {\nrev = \"f88fc7a04249cf230377dd11e04bf125d45e9abe\";\nsha256 = \"1dkwcsgwyi76s1dqbrxll83a232h9ljwn4cps88w9fam68rf8qv3\";\n};\n};\n}\n</code></pre>"},{"location":"api/builtins/lint/","title":"Lint","text":"<p>Linters ensure source code follows best practices.</p>"},{"location":"api/builtins/lint/#lintbash","title":"lintBash","text":"<p>Lints Bash code with ShellCheck.</p> <p>Types:</p> <ul> <li>lintBash:<ul> <li>enable (<code>boolean</code>): Optional.     Defaults to <code>false</code>.</li> <li>targets (<code>listOf str</code>): Optional.     Files or directories (relative to the project) to lint.     Defaults to the entire project.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nlintBash = {\nenable = true;\ntargets = [\n\"/\" # Entire project\n\"/file.sh\" # A file\n\"/directory\" # A directory within the project\n];\n};\n}\n</code></pre> <pre><code>m . /lintBash\n</code></pre>"},{"location":"api/builtins/lint/#lintclojure","title":"lintClojure","text":"<p>Lints clojure code with clj-kondo.</p> <p>Types:</p> <ul> <li> <p>lintClojure (<code>attrsOf (listOf str)</code>): Optional.     Mapping of custom names to lists of paths (relative to the project) to lint.</p> <p>Defaults to <code>{ }</code>.</p> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nlintClojure = {\nexample1 = [\n\"/\" # Entire project\n\"/file.clj\" # A file\n];\nexample2 = [\n\"/directory\" # A directory within the project\n];\n};\n}\n</code></pre> <pre><code>m . /lintClojure/example1`\n</code></pre>"},{"location":"api/builtins/lint/#lintgitcommitmsg","title":"lintGitCommitMsg","text":"<p>It creates a commit diff between you current branch and the main branch of the repository. All commits included in the diff are linted using Commitlint.</p> <p>Types:</p> <ul> <li>lintGitCommitMsg:<ul> <li>enable (<code>boolean</code>): Optional.     Defaults to <code>false</code>.</li> <li>branch (<code>str</code>): Optional.     Name of the main branch.     Defaults to <code>main</code>.</li> <li>config (<code>str</code>): Optional.     Path to a configuration file for Commitlint.     Defaults to     config.js.</li> <li>parser (<code>str</code>): Optional.     Commitlint parser definitions.     Defaults to     parser.js.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nlintGitCommitMsg = {\nenable = true;\nbranch = \"my-branch-name\";\n# If you want to use custom configs or parsers you can do it like this:\n# config = \"/src/config/config.js\";\n# parser = \"/src/config/parser.js\";\n};\n}\n</code></pre> <pre><code>m . /lintGitCommitMsg\n</code></pre>"},{"location":"api/builtins/lint/#lintgitmailmap","title":"lintGitMailMap","text":"<p>Lint the Git mailmap of the project with MailMap Linter.</p> <p>Types:</p> <ul> <li>lintGitMailmap:<ul> <li>enable (<code>boolean</code>): Optional.     Defaults to <code>false</code>.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nlintGitMailMap = {\nenable = true;\n};\n}\n</code></pre> <pre><code>m . /lintGitMailMap\n</code></pre>"},{"location":"api/builtins/lint/#lintmarkdown","title":"lintMarkdown","text":"<p>Lints Markdown code with Markdown lint tool.</p> <p>Types:</p> <ul> <li>lintMarkdown (<code>attrsOf moduleType</code>): Optional.     Definitions of config and associated paths to lint.     Defaults to <code>{ }</code>.</li> <li>moduleType (<code>submodule</code>):<ul> <li>config (<code>str</code>): Optional.     Path to the config file.     Defaults to config.rb.</li> <li>targets (<code>listOf str</code>): Required.     paths to lint with <code>config</code>.</li> <li>rulesets (<code>str</code>): Optional.     Path to the custom rulesets file.     Defaults to rulesets.rb.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nlintMarkdown = {\nall = {\n# You can pass custom configs like this:\n# config = \"/src/config/markdown.rb\";\n# You can pass custom rules like this:\n# rulesets = \"/src/config/rulesets.rb\";\ntargets = [ \"/\" ];\n};\nothers = {\ntargets = [ \"/others\" ];\n};\n};\n}\n</code></pre> <pre><code>  m . /lintMarkdown/all\n</code></pre>"},{"location":"api/builtins/lint/#lintnix","title":"lintNix","text":"<p>Lints Nix code with statix.</p> <p>Types:</p> <ul> <li>lintNix:<ul> <li>enable (<code>boolean</code>): Optional.     Defaults to <code>false</code>.</li> <li>targets (<code>listOf str</code>): Optional.     Files or directories (relative to the project) to lint.     Defaults to the entire project.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nlintNix = {\nenable = true;\ntargets = [\n\"/\" # Entire project\n\"/file.nix\" # A file\n\"/directory\" # A directory within the project\n];\n};\n}\n</code></pre> <pre><code>m . /lintNix\n</code></pre>"},{"location":"api/builtins/lint/#lintpython","title":"lintPython","text":"<p>Lints Python code with mypy, Prospector, and (if configured) import-linter.</p> <p>Types:</p> <ul> <li>lintPython:<ul> <li>dirsOfModules (<code>attrsOf dirOfModulesType</code>): Optional.     Definitions of directories of python packages/modules to lint.     Defaults to <code>{ }</code>.</li> <li>imports (<code>attrsOf importsType</code>): Optional.     Definitions of python packages whose imports will be linted.     Defaults to <code>{ }</code>.</li> <li>modules (<code>attrsOf moduleType</code>): Optional.     Definitions of python packages/modules to lint.     Defaults to <code>{ }</code>.</li> </ul> </li> <li>dirOfModulesType (<code>submodule</code>):<ul> <li>python (<code>enum [\"3.8\" \"3.9\" \"3.10\" \"3.11\"]</code>):     Python interpreter version that your package/module is designed for.</li> <li>searchPaths (<code>asIn makeSearchPaths</code>): Optional.     Arguments here will be passed as-is to <code>makeSearchPaths</code>.     Defaults to <code>makeSearchPaths</code>'s defaults.</li> <li>src (<code>str</code>):     Path to the directory that contains inside many packages/modules.</li> </ul> </li> <li>importsType (<code>submodule</code>):<ul> <li>config (<code>str</code>):     Path to the import-linter configuration file.</li> <li>searchPaths (<code>asIn makeSearchPaths</code>): Optional.     Arguments here will be passed as-is to <code>makeSearchPaths</code>.     Defaults to <code>makeSearchPaths</code>'s defaults.</li> <li>src (<code>str</code>):     Path to the package/module.</li> </ul> </li> <li>moduleType (<code>submodule</code>):<ul> <li>python (<code>enum [\"3.8\" \"3.9\" \"3.10\" \"3.11\"]</code>):     Python interpreter version that your package/module is designed for.</li> <li>searchPaths (<code>asIn makeSearchPaths</code>): Optional.     Arguments here will be passed as-is to <code>makeSearchPaths</code>.     Defaults to <code>makeSearchPaths</code>'s defaults.</li> <li>src (<code>str</code>):     Path to the package/module.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation dirOfModulesInvocation module <pre><code>{\nlintPython = {\ndirsOfModules = {\nmakes = {\npython = \"3.8\";\nsrc = \"/src/cli\";\n};\n};\nimports = {\ncli = {\nconfig = \"/src/cli/imports.cfg\";\nsrc = \"/src/cli\";\n};\n};\nmodules = {\ncliMain = {\npython = \"3.8\";\nsrc = \"/src/cli/main\";\n};\n};\n};\n}\n</code></pre> <pre><code>m . /lintPython/dirOfModules/makes/main\n</code></pre> <pre><code>m . /lintPython/module/cliMain\n</code></pre>"},{"location":"api/builtins/lint/#lintterraform","title":"lintTerraform","text":"<p>Lint Terraform code with TFLint.</p> <p>Types:</p> <ul> <li>lintTerraform:<ul> <li>config (<code>str</code>): Optional.     Path to a TFLint configuration file.     Defaults to config.hcl.</li> <li>modules (<code>attrsOf moduleType</code>): Optional.     Path to Terraform modules to lint.     Defaults to <code>{ }</code>.</li> </ul> </li> <li>moduleType (<code>submodule</code>):<ul> <li>setup (<code>listOf package</code>): Optional.     Makes Environment     or Makes Secrets     to <code>source</code> (as in Bash's <code>source</code>)     before anything else.     Defaults to <code>[ ]</code>.</li> <li>src (<code>str</code>):     Path to the Terraform module.</li> <li>version (<code>enum [ \"0.14\" \"0.15\" \"1.0\" ]</code>):     Terraform version your module is built with.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nlintTerraform = {\n# You can use a custom configuration like this:\n# config = \"/src/config/tflint.hcl\";\nmodules = {\nmodule1 = {\nsrc = \"/my/module1\";\nversion = \"0.14\";\n};\nmodule2 = {\nsrc = \"/my/module2\";\nversion = \"0.15\";\n};\n};\n};\n}\n</code></pre> <pre><code>m . /lintTerraform/module1\n</code></pre>"},{"location":"api/builtins/lint/#lintwithajv","title":"lintWithAjv","text":"Warning <p>This function is only available on Linux at the moment.</p> <p>Lints JSON and YAML data files with JSON Schemas. It uses ajv-cli.</p> <p>Types:</p> <ul> <li>lintWithAjv (<code>attrsOf schemaType</code>): Optional.     Definitions of schema and associated data to lint.     Defaults to <code>{ }</code>.</li> <li>schemaType (<code>submodule</code>):<ul> <li>schema (<code>str</code>): Required.     Path to the JSON Schema.</li> <li>targets (<code>listOf str</code>): Required.     YAML or JSON     data files to lint with <code>schema</code>.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nlintWithAjv = {\nusers = {\nschema = \"/users/schema.json\";\ntargets = [\n\"/users/data1.json\"\n\"/users/data.yaml\"\n];\n};\ncolors = {\nschema = \"/colors/schema.json\";\ntargets = [\n\"/colors/data1.json\"\n\"/colors/data2.yaml\"\n];\n};\n};\n}\n</code></pre> <pre><code>m . /lintWithAjv/users\n</code></pre>"},{"location":"api/builtins/lint/#lintwithlizard","title":"lintWithLizard","text":"<p>Using Lizard to check Ciclomatic Complexity and functions length in all supported languages</p> <p>Types:</p> <ul> <li> <p>lintWithLizard (<code>attrsOf (listOf str)</code>): Optional.     Mapping of custom names to lists of paths (relative to the project) to lint.</p> <p>Defaults to <code>{ }</code>.</p> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nlintWithLizard = {\nexample1 = [\n\"/\" # Entire project\n\"/file.py\" # A file\n];\nexample2 = [\n\"/directory\" # A directory within the project\n];\n};\n}\n</code></pre> <pre><code>$ m . /lintWithLizard/example1\n</code></pre>"},{"location":"api/builtins/monitoring/","title":"Monitoring","text":""},{"location":"api/builtins/monitoring/#calculatescorecard","title":"calculateScorecard","text":"<p>Calculate your remote repository Scorecard. This module is only available for GitHub projects at the moment.</p> <p>Pre-requisites:</p> <ol> <li>To run this module you need to set up a valid <code>GITHUB_AUTH_TOKEN</code> on your     target repository. You can set this up in your CI or locally to run this     check on your machine.</li> </ol> <p>Types:</p> <ul> <li> <p>checks (<code>listOf str</code>): Optional,     defaults to all the checks available for Scorecard:</p> <pre><code>[\n\"Branch-Protection\"\n\"Fuzzing\"\n\"License\"\n\"SAST\"\n\"Binary-Artifacts\"\n\"Dependency-Update-Tool\"\n\"Pinned-Dependencies\"\n\"CI-Tests\"\n\"Code-Review\"\n\"Contributors\"\n\"Maintained\"\n\"Token-Permissions\"\n\"Security-Policy\"\n\"CII-Best-Practices\"\n\"Dangerous-Workflow\"\n\"Packaging\"\n\"Signed-Releases\"\n\"Vulnerabilities\"\n]\n</code></pre> </li> <li> <p>format (<code>str</code>): Optional, defaults to JSON. This is the format which     the scorecard will be printed. Accepted values are: <code>\"default\"</code> which is an     <code>ASCII Table</code> and JSON.</p> </li> <li>target (<code>str</code>): Mandatory, this is the repository url where you want to run     scorecard.</li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\ncalculateScorecard = {\nchecks = [ \"SAST\" ];\nenable = true;\nformat = \"json\"\ntarget = \"github.com/fluidattacks/makes\";\n};\n}\n</code></pre> <pre><code>m . /calculateScorecard\n...\n[INFO] Calculating Scorecard\n{\n\"date\": \"2022-02-28\",\n  \"repo\": {\n\"name\": \"github.com/fluidattacks/makes\",\n    \"commit\": \"739dcdc0513c29de67406e543e1392ea194b3452\"\n},\n  \"scorecard\": {\n\"version\": \"4.0.1\",\n    \"commit\": \"c60b66bbc8b85286416d6ab9ae9324a095e66c94\"\n},\n  \"score\": 5,\n  \"checks\": [\n{\n\"details\": [\n\"Warn: 16 commits out of 30 are checked with a SAST tool\",\n        \"Warn: CodeQL tool not detected\"\n],\n      \"score\": 5,\n      \"reason\": \"SAST tool is not run on all commits -- score normalized to 5\",\n      \"name\": \"SAST\",\n      \"documentation\": {\n\"url\": \"https://github.com/ossf/scorecard/blob/c60b66bbc8b85286416d6ab9ae9324a095e66c94/docs/checks.md#sast\",\n        \"short\": \"Determines if the project uses static code analysis.\"\n}\n}\n],\n  \"metadata\": null\n}\n[INFO] Aggregate score: 5\n</code></pre>"},{"location":"api/builtins/performance/","title":"Performance","text":""},{"location":"api/builtins/performance/#cache","title":"cache","text":"<p>Configure caches to read, and optionally a Cachix cache for reading and writting.</p> <p>Types:</p> <ul> <li>cache:<ul> <li>extra: (attrsOf cacheExtra)</li> <li>readNixos (<code>bool</code>): Optional.     Set to <code>true</code> in order to add https://cache.nixos.org as a read cache.     Defaults to <code>true</code>.</li> </ul> </li> <li>cacheExtra:<ul> <li>enable (<code>str</code>): Read from cache.     is read on the server.</li> <li>pubKey (<code>str</code>): Public key of the cache server.</li> <li>token (<code>str</code>): The name of the environment variable that contains the     token to push the cache.</li> <li>type: (<code>enum [cachix]</code>): Binary cache type.     Can be Cachix.</li> <li>url (<code>str</code>):     URL of the cache.</li> <li>write (<code>bool</code>): Enable pushing derivations to the cache. Requires <code>token</code>.</li> </ul> </li> </ul> <p>Required environment variables:</p> <ul> <li><code>CACHIX_AUTH_TOKEN</code>: API token of the Cachix cache.<ul> <li>For Public caches:     If not set the cache will be read, but not written to.</li> <li>For private caches:     If not set the cache won't be read, nor written to.</li> </ul> </li> </ul> <p>Example:</p> makes.nix <pre><code>{\ncache = {\nreadNixos = true;\nextra = {\nmain = {\nenable = true;\npubKey = \"makes.cachix.org-1:zO7UjWLTRR8Vfzkgsu1PESjmb6ymy1e4OE9YfMmCQR4=\";\ntoken = \"CACHIX_AUTH_TOKEN\";\ntype = \"nixos\";\nurl = \"https://makes.cachix.org?priority=2\";\nwrite = true;\n};\n};\n};\n}\n</code></pre>"},{"location":"api/builtins/performance/#configuring-trusted-users","title":"Configuring trusted-users","text":"<p>If you decided to go with a Multi-user installation when installing Nix, you will have to take additional steps in order to make the cache work.</p> <p>As the Multi-user installation does not trust your user by default, you will have to add yourself to the <code>trusted-users</code> in the Nix Configuration File.</p>"},{"location":"api/builtins/secrets/","title":"Secrets","text":"<p>Managing secrets is critical for application security.</p> <p>The following functions are secure and allow you to re-use secrets across different Makes components.</p>"},{"location":"api/builtins/secrets/#secretsforawsfromenv","title":"secretsForAwsFromEnv","text":"<p>Load AWS secrets from environment variables.</p> <p>Types:</p> <ul> <li>secretsForAwsFromEnv (<code>attrsOf awsFromEnvType</code>): Optional.     Defaults to <code>{ }</code>.</li> <li>awsFromEnvType (<code>submodule</code>):<ul> <li>accessKeyId (<code>str</code>): Optional.     Name of the environment variable     that stores the value of the AWS Access Key Id.     Defaults to <code>\"AWS_ACCESS_KEY_ID\"</code>.</li> <li>defaultRegion (<code>str</code>): Optional.     Name of the environment variable     that stores the value of the AWS Default Region.     Defaults to <code>\"AWS_DEFAULT_REGION\"</code> (Which defaults to <code>\"us-east-1\"</code>).</li> <li>secretAccessKey (<code>str</code>): Optional.     Name of the environment variable     that stores the value of the AWS Secret Access Key.     Defaults to <code>\"AWS_SECRET_ACCESS_KEY\"</code>.</li> <li>sessionToken (<code>str</code>): Optional.     Name of the environment variable     that stores the value of the AWS Session Token.     Defaults to <code>\"AWS_SESSION_TOKEN\"</code> (Which defaults to <code>\"\"</code>).</li> </ul> </li> </ul> <p>Always available outputs:</p> <ul> <li><code>/secretsForAwsFromEnv/__default__</code>:<ul> <li>accessKeyId: \"AWS_ACCESS_KEY_ID\";</li> <li>defaultRegion: \"AWS_DEFAULT_REGION\";</li> <li>secretAccessKey: \"AWS_SECRET_ACCESS_KEY\";</li> <li>sessionToken: \"AWS_SESSION_TOKEN\";</li> </ul> </li> </ul> <p>Example:</p> makes.nix <pre><code>{\n  outputs,\n  lintTerraform,\n  secretsForAwsFromEnv,\n...\n}: {\nsecretsForAwsFromEnv = {\nmakesDev = {\naccessKeyId = \"ENV_VAR_FOR_MAKES_DEV_AWS_ACCESS_KEY_ID\";\nsecretAccessKey = \"ENV_VAR_FOR_MAKES_DEV_AWS_SECRET_ACCESS_KEY\";\n};\nmakesProd = {\naccessKeyId = \"ENV_VAR_FOR_MAKES_PROD_AWS_ACCESS_KEY_ID\";\nsecretAccessKey = \"ENV_VAR_FOR_MAKES_PROD_AWS_SECRET_ACCESS_KEY\";\n};\n};\nlintTerraform = {\nmodules = {\nmoduleDev = {\nsetup = [\n          outputs.\"/secretsForAwsFromEnv/makesDev\"\n];\nsrc = \"/my/module1\";\nversion = \"0.14\";\n};\nmoduleProd = {\nsetup = [\n          outputs.\"/secretsForAwsFromEnv/makesProd\"\n];\nsrc = \"/my/module2\";\nversion = \"0.14\";\n};\n};\n};\n}\n</code></pre>"},{"location":"api/builtins/secrets/#secretsforawsfromgitlab","title":"secretsForAwsFromGitlab","text":"<p>Aquire an AWS session using GitLab CI OIDC.</p> <p>Types:</p> <ul> <li>secretsForAwsFromGitlab (<code>attrsOf awsFromGitlabType</code>): Optional.     Defaults to <code>{ }</code>.</li> <li>awsFromGitlabType (<code>submodule</code>):<ul> <li>roleArn (<code>str</code>):     ARN of AWS role to be assumed.</li> <li>duration (<code>ints.positive</code>): Optional.     Duration in seconds of the session.     Defaults to <code>3600</code>.</li> <li>retries (<code>ints.positive</code>): Optional.     Number of login retries before failing.     One retry per second.     Defaults to <code>15</code>.</li> </ul> </li> </ul> <p>Example:</p> makes.nix <pre><code>{\n  outputs,\n  lintTerraform,\n  secretsForAwsFromGitlab,\n...\n}: {\nsecretsForAwsFromGitlab = {\nmakesDev = {\nroleArn = \"arn:aws:iam::123456789012:role/dev\";\nduration = 3600;\nretries = 30;\n};\nmakesProd = {\nroleArn = \"arn:aws:iam::123456789012:role/prod\";\nduration = 7200;\nretries = 30;\n};\n};\nlintTerraform = {\nmodules = {\nmoduleDev = {\nsetup = [\n          outputs.\"/secretsForAwsFromGitlab/makesDev\"\n];\nsrc = \"/my/module1\";\nversion = \"0.14\";\n};\nmoduleProd = {\nsetup = [\n          outputs.\"/secretsForAwsFromGitlab/makesProd\"\n];\nsrc = \"/my/module2\";\nversion = \"0.14\";\n};\n};\n};\n}\n</code></pre>"},{"location":"api/builtins/secrets/#secretsforenvfromsops","title":"secretsForEnvFromSops","text":"<p>Export secrets from a Sops encrypted manifest to environment variables.</p> <p>Types:</p> <ul> <li>secretsForEnvFromSops (<code>attrsOf secretForEnvFromSopsType</code>): Optional.     Defaults to <code>{ }</code>.</li> <li>secretForEnvFromSopsType (<code>submodule</code>):<ul> <li>manifest (<code>str</code>):     Relative path to the encrypted Sops file.</li> <li>vars (<code>listOf str</code>):     Names of the values to export out of the manifest.</li> </ul> </li> </ul> <p>Example:</p> makes.nix <pre><code>{\n  outputs,\n...\n}: {\nsecretsForEnvFromSops = {\ncloudflare = {\n# Manifest contains inside:\n#   CLOUDFLARE_ACCOUNT_ID: ... ciphertext ...\n#   CLOUDFLARE_API_TOKEN: ... ciphertext ...\nmanifest = \"/infra/secrets/prod.yaml\";\nvars = [ \"CLOUDFLARE_ACCOUNT_ID\" \"CLOUDFLARE_API_TOKEN\" ];\n};\n};\nlintTerraform = {\nmodules = {\nmoduleProd = {\nsetup = [\n          outputs.\"/secretsForEnvFromSops/cloudflare\"\n];\nsrc = \"/my/module1\";\nversion = \"0.14\";\n};\n};\n};\n}\n</code></pre>"},{"location":"api/builtins/secrets/#secretsforgpgfromenv","title":"secretsForGpgFromEnv","text":"<p>Load GPG public or private keys from environment variables into an ephemeral key-ring.</p> <p>Each key content must be stored in a environment variable in ASCII Armor format.</p> <p>Types:</p> <ul> <li>secretsForGpgFromEnv (<code>attrsOf (listOf str)</code>): Optional.     Mapping of name     to a list of environment variable names     where the GPG key contents are stored.     Defaults to <code>{ }</code>.</li> </ul> <p>Example:</p> secrets.yamlmakes.nixmain.nixInvocation <pre><code># /path/to/my/project/secrets.yaml\npassword: ENC[AES256_GCM,data:cLbgzNHgBN5drfsDAS+RTV5fL6I=,iv:2YHhHxKg+lbGqdB5nhhG2YemeKB6XWvthGfNNkVgytQ=,tag:cj/el3taq1w7UOp/JQSNwA==,type:str]\n# ...\n</code></pre> <pre><code># /path/to/my/project/makes.nix\n{\n  outputs,\n...\n}: {\n# Load keys into an ephemeral GPG keyring\nsecretsForGpgFromEnv = {\nexample = [\n\"ENV_VAR_FOR_PRIVATE_KEY_CONTENT\"\n\"ENV_VAR_FOR_PUB_KEY_CONTENT\"\n];\n};\n# Use sops to decrypt an encrypted file\nsecretsForEnvFromSops = {\nexample = {\nmanifest = \"/secrets.yaml\";\nvars = [ \"password\" ];\n};\n};\n}\n</code></pre> <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  makeScript,\n  outputs,\n...\n}:\nmakeScript {\nname = \"example\";\n  searchPaths.source = [\n# First setup an ephemeral GPG keyring\n    outputs.\"/secretsForGpgFromEnv/example\"\n# Now sops will decrypt secrets using the GPG keys in the ring\n    outputs.\"/secretsForEnvFromSops/example\"\n];\nentrypoint = ''\n    echo Decrypted password: $password\n  '';\n}\n</code></pre> <pre><code>$ m . /example\n\nDecrypted password: 123\n</code></pre>"},{"location":"api/builtins/secrets/#secretsforkubernetesconfigfromaws","title":"secretsForKubernetesConfigFromAws","text":"<p>Create a Kubernetes config file out of an AWS EKS cluster and set it up in the KUBECONFIG Environment Variable.</p> <p>Types:</p> <ul> <li>secretsForKubernetesConfigFromAws     (<code>attrsOf secretForKubernetesConfigFromAwsType</code>): Optional.     Defaults to <code>{ }</code>.</li> <li>secretForKubernetesConfigFromAwsType (<code>submodule</code>):<ul> <li>cluster (<code>str</code>):     AWS EKS Cluster name.</li> <li>region (<code>str</code>):     AWS Region the EKS cluster is located in.</li> </ul> </li> </ul> <p>Example:</p> makes.nix <pre><code>{\n  outputs,\n...\n}: {\nsecretsForKubernetesConfigFromAws = {\nmyCluster = {\ncluster = \"makes-k8s\";\nregion = \"us-east-1\";\n};\n};\ndeployTerraform = {\nmodules = {\nmoduleProd = {\nsetup = [\n          outputs.\"/secretsForKubernetesConfigFromAws/myCluster\"\n];\nsrc = \"/my/module1\";\nversion = \"0.14\";\n};\n};\n};\n}\n</code></pre>"},{"location":"api/builtins/secrets/#secretsforterraformfromenv","title":"secretsForTerraformFromEnv","text":"<p>Export secrets in a format suitable for Terraform from the given environment variables.</p> <p>Types:</p> <ul> <li>secretsForTerraformFromEnv (<code>attrsOf (attrsOf str)</code>): Optional.     Mapping of secrets group name     to a mapping of Terraform variable names     to environment variable names.     Defaults to <code>{ }</code>.</li> </ul> <p>Example:</p> makes.nixmain.tf <pre><code>{\n  outputs,\n...\n}: {\nsecretsForTerraformFromEnv = {\nexample = {\n# Equivalent in Bash to:\n#   export TF_VAR_cloudflareAccountId=$ENV_VAR_FOR_CLOUDFLARE_ACCOUNT_ID\n#   export TF_VAR_cloudflareApiToken=$ENV_VAR_FOR_CLOUDFLARE_API_TOKEN\ncloudflareAccountId = \"ENV_VAR_FOR_CLOUDFLARE_ACCOUNT_ID\";\ncloudflareApiToken = \"ENV_VAR_FOR_CLOUDFLARE_API_TOKEN\";\n};\n};\n}\n</code></pre> <pre><code>variable \"cloudflareAccountId\" {}\n</code></pre>"},{"location":"api/builtins/security/","title":"Security","text":""},{"location":"api/builtins/security/#securekuberneteswithrbacpolice","title":"secureKubernetesWithRbacPolice","text":"Warning <p>This function is only available on Linux at the moment.</p> <p>Secure Kubernetes clusters with rbac-police.</p> <p>Types:</p> <ul> <li>secureKubernetesWithRbacPolice (<code>attrsOf kubernetesWithRbacPolice</code>): Optional.     Defaults to <code>{ }</code>.</li> <li>kubernetesWithRbacPolice (<code>submodule</code>):<ul> <li>severity (<code>str</code>):     Only evaluate policies with severity &gt;= threshold.     Defaults to <code>Low</code>.</li> <li>setup (<code>listOf package</code>):     Makes Environment     or Makes Secrets     to <code>source</code> (as in Bash's <code>source</code>)     before anything else.     Defaults to <code>[ ]</code>.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\n  outputs,\n  secretsForAwsFromGitlab,\n  secretsForKubernetesConfigFromAws,\n  secureKubernetesWithRbacPolice,\n...\n}: {\nsecretsForAwsFromGitlab = {\nmakesProd = {\nroleArn = \"arn:aws:iam::123456789012:role/prod\";\nduration = 7200;\nretries = 30;\n};\n};\nsecretsForKubernetesConfigFromAws = {\nmakes = {\ncluster = \"makes-k8s\";\nregion = \"us-east-1\";\n};\n};\nsecureKubernetesWithRbacPolice = {\nmakes = {\nseverity = \"Low\";\nsetup = [\n        outputs.\"/secretsForAwsFromGitlab/makesProd\"\n        outputs.\"/secretsForKubernetesConfigFromAws/makes\"\n];\n};\n};\n}\n</code></pre> <pre><code>m . /secureKubernetesWithRbacPolice/makes\n</code></pre>"},{"location":"api/builtins/security/#securepythonwithbandit","title":"securePythonWithBandit","text":"<p>Secure Python code with Bandit.</p> <p>Types:</p> <ul> <li>securePythonWithBandit (<code>attrsOf projectType</code>): Optional.     Definitions of directories of python packages/modules to lint.     Defaults to <code>{ }</code>.</li> <li>projectType (<code>submodule</code>):<ul> <li>python (<code>enum [\"3.8\" \"3.9\" \"3.10\" \"3.11\"]</code>):     Python interpreter version that your package/module is designed for.</li> <li>target (<code>str</code>):     Relative path to the package/module.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\nsecurePythonWithBandit = {\ncli = {\npython = \"3.8\";\ntarget = \"/src/cli\";\n};\n};\n}\n</code></pre> <pre><code>m . /securePythonWithBandit/cli\n</code></pre>"},{"location":"api/builtins/test/","title":"Test","text":""},{"location":"api/builtins/test/#testpython","title":"testPython","text":"<p>Test Python code with pytest.</p> <p>Types:</p> <ul> <li>testPython (<code>attrsOf targetType</code>): Optional.     Mapping of names to pytest targets.     Defaults to <code>{ }</code>.</li> <li> <p>targetType (<code>submodule</code>):</p> <ul> <li>python (<code>enum [\"3.8\" \"3.9\" \"3.10\" \"3.11\"]</code>):     Python interpreter version that your package/module is designed for.</li> <li>src (<code>str</code>):     Path to the file or directory that contains the tests code.</li> <li>searchPaths (<code>asIn makeSearchPaths</code>): Optional.     Arguments here will be passed as-is to <code>makeSearchPaths</code>.     Defaults to <code>makeSearchPaths</code>'s defaults.</li> <li>extraFlags (<code>listOf str</code>): Optional.     Extra command line arguments to propagate to pytest.     Defaults to <code>[ ]</code>.</li> <li>extraSrcs (<code>attrsOf package</code>): Optional.     Place extra sources at the same level of your project code     so you can reference them via relative paths.</li> </ul> <p>The final test structure looks like this:</p> <pre><code>/tmp/some-random-unique-dir\n\u251c\u2500\u2500 __project__  # The entire source code of your project\n\u2502\u00a0  \u251c\u2500\u2500 ...\n\u2502\u00a0  \u2514\u2500\u2500 path/to/src\n... # repeat for all extraSrcs\n\u251c\u2500\u2500 \"${extraSrcName}\"\n\u2502\u00a0  \u2514\u2500\u2500 \"${extraSrcValue}\"\n...\n</code></pre> <p>And we will run pytest like this:</p> <pre><code>pytest /tmp/some-random-unique-dir/__project__/path/to/src\n</code></pre> <p>Defaults to <code>{ }</code>.</p> </li> </ul> <p>Example:</p> makes.nixInvocationDirectory <pre><code>{\ntestPython = {\nexample = {\npython = \"3.9\";\nsrc = \"/test/test-python\";\n};\n};\n}\n</code></pre> <pre><code>m . /testPython/example\n</code></pre> <pre><code>$ tree test/test-python/\n\ntest/test-python/\n  \u2514\u2500\u2500 test_something.py\n\n$ cat test/test-python/test_something.py\n\n1 def test_one_plus_one_equals_two() -&gt; None:\n  2     assert (1 + 1) == 2\n</code></pre>"},{"location":"api/builtins/test/#testterraform","title":"testTerraform","text":"<p>Test Terraform code by performing a <code>terraform plan</code> over the specified Terraform modules.</p> <p>Types:</p> <ul> <li>testTerraform:<ul> <li>modules (<code>attrsOf moduleType</code>): Optional.     Path to Terraform modules to lint.     Defaults to <code>{ }</code>.</li> </ul> </li> <li>moduleType (<code>submodule</code>):<ul> <li>setup (<code>listOf package</code>): Optional.     Makes Environment     or Makes Secrets     to <code>source</code> (as in Bash's <code>source</code>)     before anything else.     Defaults to <code>[ ]</code>.</li> <li>src (<code>str</code>):     Path to the Terraform module.</li> <li>version (<code>enum [ \"0.14\" \"0.15\" \"1.0\" ]</code>):     Terraform version your module is built with.</li> <li>debug (<code>bool</code>): Optional.     Enable maximum level of debugging     and remove parallelism so logs are clean.     Defaults to <code>false</code>.</li> </ul> </li> </ul> <p>Example:</p> makes.nixInvocation <pre><code>{\ntestTerraform = {\nmodules = {\nmodule1 = {\nsrc = \"/my/module1\";\nversion = \"0.14\";\n};\nmodule2 = {\nsrc = \"/my/module2\";\nversion = \"1.0\";\n};\n};\n};\n}\n</code></pre> <pre><code>$ m . /testTerraform/module1\n</code></pre>"},{"location":"api/builtins/utilities/","title":"Utilities","text":"<p>Utilities provide an easy mechanism for calling functions from makes without having to specify them on any file.</p>"},{"location":"api/builtins/utilities/#makenodejslock","title":"makeNodeJsLock","text":"<p>You can generate a <code>package-lock.json</code> for makeNodeJsEnvironment like this:</p> <pre><code>m github:fluidattacks/makes@23.04 /utils/makeNodeJsLock \\\n\"${node_js_version}\" \\\n\"${package_json}\" \\\n\"${package_lock}\"\n</code></pre> <ul> <li>Supported <code>node_js_version</code>s are: <code>14</code>, <code>16</code> and <code>18</code>.</li> <li><code>package_json</code> is the absolute path to the <code>package.json</code> file in your     project.</li> <li><code>package_lock</code> is the absolute path     to the <code>package-lock.json</code> file in your project, this file can be an empty     file.</li> </ul>"},{"location":"api/builtins/utilities/#makepythonlock","title":"makePythonLock","text":"<p>You can generate a <code>sourcesYaml</code> for makePythonPypiEnvironment like this:</p> <pre><code>m github:fluidattacks/makes@23.04 /utils/makePythonLock \\\n\"${python_version}\" \\\n\"${dependencies_yaml}\" \\\n\"${sources_yaml}\"\n</code></pre> <ul> <li>Supported <code>python_version</code>s are: <code>3.8</code>, <code>3.9</code>, <code>3.10</code> and <code>3.11</code>.</li> <li> <p><code>dependencies_yaml</code> is the absolute path to a YAML file     mapping PyPI packages to version constraints.     Example:</p> <pre><code>Django: \"3.2.*\"\npsycopg2: \"2.9.1\"\n</code></pre> </li> <li> <p><code>sources_yaml</code> is the absolute path     to a file were the script will output results.</p> </li> </ul>"},{"location":"api/builtins/utilities/#makerubylock","title":"makeRubyLock","text":"<p>You can generate a <code>sourcesYaml</code> for makeRubyGemsEnvironment like this:</p> <pre><code>m github:fluidattacks/makes@23.04 /utils/makeRubyLock \\\n\"${ruby_version}\" \\\n\"${dependencies_yaml}\" \\\n\"${sources_yaml}\"\n</code></pre> <ul> <li>Supported <code>ruby_version</code>s are: <code>2.7</code>, <code>3.0</code> and <code>3.1</code>.</li> <li> <p><code>dependencies_yaml</code> is the absolute path to a YAML file     mapping RubyGems gems to version constraints.     Example:</p> <pre><code>rubocop: \"1.43.0\"\nslim: \"~&gt; 4.1\"\n</code></pre> </li> <li> <p><code>sources_yaml</code> is the absolute path     to a file were the script will output results.</p> </li> </ul>"},{"location":"api/builtins/utilities/#makesopsencryptedfile","title":"makeSopsEncryptedFile","text":"<p>You can generate an encrypted Sops file like this:</p> <pre><code>m github:fluidattacks/makes@23.04 /utils/makeSopsEncryptedFile \\\n\"${kms_key_arn}\" \\\n\"${output}\"\n</code></pre> <ul> <li><code>kms_key_arn</code> is the arn of the key you will use for encrypting the file.</li> <li><code>output</code> is the path for your resulting encrypted file.</li> </ul>"},{"location":"api/builtins/utilities/#workspaceforterraformfromenv","title":"workspaceForTerraformFromEnv","text":"<p>Sets a Terraform Workspace specified via environment variable.</p> <p>Types:</p> <ul> <li>workspaceForTerraformFromEnv:<ul> <li>modules (<code>attrsOf moduleType</code>): Optional.     Terraform modules to switch workspace.     Defaults to <code>{ }</code>.</li> </ul> </li> <li>moduleType (<code>submodule</code>):<ul> <li>setup (<code>listOf package</code>): Optional.     Makes Environment     or Makes Secrets     to <code>source</code> (as in Bash's <code>source</code>)     before anything else.     Defaults to <code>[ ]</code>.</li> <li>src (<code>str</code>):     Path to the Terraform module.</li> <li>variable (<code>str</code>): Optional.     Name of the environment variable that contains     the name of the workspace you want to use.     Defaults to <code>\"\"</code>.     When <code>\"\"</code> provided, workspace is <code>default</code>.</li> <li>version (<code>enum [ \"0.14\" \"0.15\" \"1.0\" ]</code>):     Terraform version your module is built with.</li> </ul> </li> </ul> <p>Example:</p> makes.nix <pre><code>{\ntestTerraform = {\nmodules = {\nmodule1 = {\nsetup = [\n          outputs.\"/workspaceForTerraformFromEnv/module1\"\n];\nsrc = \"/my/module1\";\nversion = \"0.14\";\n};\n};\n};\nworkspaceForTerraformFromEnv = {\nmodules = {\nmodule1 = {\nsrc = \"/my/module1\";\nvariable = \"CI_COMMIT_REF_NAME\";\nversion = \"0.14\";\n};\n};\n};\n}\n</code></pre>"},{"location":"api/extensions/","title":"Introduction","text":"<p>You can create custom workflows not covered by the builtin <code>makes.nix</code> configuration options.</p> <p>Locate in the root of your project:</p> <p><code>$ cd /path/to/my/project</code></p> <p>Create a directory structure. In this case: <code>makes/example</code>.</p> <p><code>$ mkdir -p makes/example</code></p> <p>We will place in this directory all the source code for the custom workflow called <code>example</code>.</p> <p>Create a <code>main.nix</code> file inside <code>makes/example</code>.</p> <p>Our goal is to create a bash script that prints <code>Hello from makes!</code>, so we are going to write the following function:</p> <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  makeScript,\n...\n}:\nmakeScript {\nentrypoint = \"echo Hello from Makes!\";\nname = \"hello-world\";\n}\n</code></pre> <p>Now run makes!</p> <ul> <li> <p>List all available outputs: <code>$ m .</code></p> <pre><code>Outputs list for project: /path/to/my/project\n  /example\n</code></pre> </li> <li> <p>Build and run the output: <code>$ m . /example</code></p> <pre><code>Hello from Makes!\n</code></pre> </li> </ul> <p>Makes will automatically recognize as outputs all <code>main.nix</code> files under the <code>makes/</code> directory in the root of the project. This \"magic\" <code>makes/</code> directory can be configured via the <code>extendingMakesDirs</code> option.</p> <p>You can create any directory structure you want. Output names will me mapped in an intuitive way:</p> <code>main.nix</code> position Output name Invocation command <code>/path/to/my/project/makes/main.nix</code> <code>outputs.\"/\"</code> <code>$ m . /</code> <code>/path/to/my/project/makes/example/main.nix</code> <code>outputs.\"/example\"</code> <code>$ m . /example</code> <code>/path/to/my/project/makes/other/example/main.nix</code> <code>outputs.\"/other/example\"</code> <code>$ m . /other/example</code> <p>Makes offers you a few building blocks for you to reuse.</p> <p>Let's start from the basics.</p>"},{"location":"api/extensions/containers/","title":"Containers","text":""},{"location":"api/extensions/containers/#makecontainerimage","title":"makeContainerImage","text":"<p>Build a container image in OCI Format.</p> <p>A container image is composed of:</p> <ul> <li>0 or more layers (binary blobs).<ul> <li>Each layer contains a snapshot of the root file system (<code>/</code>),     they represent portions of it.</li> <li>When the container is executed     all layers are squashed together     to compose the root     of the file system (<code>/</code>).</li> </ul> </li> <li>A JSON manifest (metadata)     that describes important aspects of the container,     for instance its layers, environment variables, entrypoint, etc.</li> </ul> <p>Resources:</p> <ul> <li>Nix and layered docker images</li> </ul> <p>Types:</p> <ul> <li>makeContainerImage (<code>function { ... } -&gt; package</code>):<ul> <li>layers (<code>listOf package</code>): Optional.     Layers of the container.     Defaults to <code>[ ]</code>.</li> <li>maxLayers (<code>ints.positive</code>): Optional.     Maximum number of layers the container can have.     Defaults to <code>65</code>.</li> <li>config (<code>attrsOf anything</code>): Optional.     Configuration manifest as described in     OCI Runtime Configuration Manifest     Defaults to <code>{ }</code>.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  inputs,\n  makeContainerImage,\n  makeDerivation,\n...\n}:\nmakeContainerImage {\nconfig = {\nEnv = [\n# Do not use this for sensitive values, it's not safe.\n\"EXAMPLE_ENV_VAR=example-value\"\n];\nWorkingDir = \"/working-dir\";\n};\nlayers = [\n    inputs.nixpkgs.coreutils # ls, cat, etc\n(makeDerivation {\nname = \"custom-layer\";\nbuilder = ''\n        # $out represents the final container root file system: /\n        #\n        # The following commands are equivalent in Docker to:\n        #   RUN mkdir /working-dir\n        #   RUN echo my-file-contents &gt; /working-dir/my-file\n        #\n        mkdir -p $out/working-dir\n        echo my-file-contents &gt; $out/working-dir/my-file\n      '';\n})\n];\n}\n</code></pre> <pre><code>$ m . /example\n\nCreating layer 1 from paths: ['/nix/store/zqaqyidzsqc7z03g4ajgizy2lz1m19xz-libunistring-0.9.10']\nCreating layer 2 from paths: ['/nix/store/xjjdyb66g3cxd5880zspazsp5f16lbxz-libidn2-2.3.1']\nCreating layer 3 from paths: ['/nix/store/wvgyhnd3rn6dhxzbr5r71gx2q9mhgshj-glibc-2.32-48']\nCreating layer 4 from paths: ['/nix/store/ip0pxdd49l1v3cmxsvw8ziwmqhyzg5pf-attr-2.4.48']\nCreating layer 5 from paths: ['/nix/store/26vpasbj38nhj462kqclwp2i6s3hhdba-acl-2.3.1']\nCreating layer 6 from paths: ['/nix/store/937f5738d2frws07ixcpg5ip176pfss1-coreutils-8.32']\nCreating layer 7 from paths: ['/nix/store/fc24830z8lqa657grb3snvjjv9vxs7ql-custom-layer']\nCreating layer 8 with customisation...\n    Adding manifests...\n    Done.\n\n/nix/store/dvif4xy1l0qsjblxvzzcr6map1hg22w5-container-image.tar.gz\n\n$ docker load &lt; /nix/store/dvif4xy1l0qsjblxvzzcr6map1hg22w5-container-image.tar.gz\n\nb5507f5bda26: Loading layer  133.1kB/133.1kB\n    da2b3a66ea19: Loading layer  1.894MB/1.894MB\n    eb4c566a2922: Loading layer  10.24kB/10.24kB\n    19b7be559bbc: Loading layer  61.44kB/61.44kB\n    Loaded image: container-image:latest\n\n$ docker run container-image:latest pwd\n/working-dir\n\n$ docker run container-image:latest ls .\n\nmy-file\n\n$ docker run container-image:latest cat my-file\n\nmy-file-contents\n\n$ docker run container-image:latest ls /\n\nbin\n    dev\n    etc\n    libexec\n    nix\n    proc\n    sys\n    working-dir\n</code></pre>"},{"location":"api/extensions/fetchers/","title":"Fetchers","text":""},{"location":"api/extensions/fetchers/#fetchurl","title":"fetchUrl","text":"<p>Fetch a file from the specified URL.</p> <p>Types:</p> <ul> <li>fetchUrl (<code>function { ... } -&gt; package</code>):<ul> <li>url (<code>str</code>):     URL to download.</li> <li>sha256 (<code>str</code>):     SHA256 of the expected output,     In order to get the SHA256     you can omit this parameter and execute Makes,     Makes will tell you the correct SHA256 on failure.</li> </ul> </li> </ul> <p>Example:</p> main.nix <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  fetchUrl,\n...\n}:\nfetchUrl {\nurl = \"https://github.com/fluidattacks/makes/blob/16aafa1e3ed4cc99eb354842341fbf6f478a211c/README.md\";\nsha256 = \"18scrymrar0bv7s92hfqfb01bv5pibyjw6dxp3i8nylmnh6gjv15\";\n}\n</code></pre>"},{"location":"api/extensions/fetchers/#fetcharchive","title":"fetchArchive","text":"<p>Fetch a Zip (.zip) or Tape Archive (.tar) from the specified URL and unpack it.</p> <p>Types:</p> <ul> <li>fetchArchive (<code>function { ... } -&gt; package</code>):<ul> <li>url (<code>str</code>):     URL to download.</li> <li>sha256 (<code>str</code>):     SHA256 of the expected output,     In order to get the SHA256     you can omit this parameter and execute Makes,     Makes will tell you the correct SHA256 on failure.</li> <li>stripRoot (<code>bool</code>): Optional.     Most archives have a symbolic top-level directory     that is discarded during unpack phase.     If this is not the case you can set this flag to <code>false</code>.     Defaults to <code>true</code>.</li> </ul> </li> </ul> <p>Example:</p> main.nix <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  fetchArchive,\n...\n}:\nfetchArchive {\nurl = \"https://github.com/fluidattacks/makes/archive/16aafa1e3ed4cc99eb354842341fbf6f478a211c.zip\";\nsha256 = \"16zx89lzv5n048h5l9f8dgpvdj0l38hx7aapc7h1d1mjc1ca2i6a\";\n}\n</code></pre>"},{"location":"api/extensions/fetchers/#fetchgithub","title":"fetchGithub","text":"<p>Fetch a commit from the specified Git repository at GitHub.</p> <p>Types:</p> <ul> <li>fetchGithub (<code>function { ... } -&gt; package</code>):<ul> <li>owner (<code>str</code>):     Owner of the repository.</li> <li>repo (<code>str</code>):     Name of the repository.</li> <li>rev (<code>str</code>):     Commit, branch or tag to fetch.</li> <li>sha256 (<code>str</code>):     SHA256 of the expected output,     In order to get the SHA256     you can omit this parameter and execute Makes,     Makes will tell you the correct SHA256 on failure.</li> </ul> </li> </ul> <p>Example:</p> main.nix <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  fetchGithub,\n...\n}:\nfetchGithub {\nowner = \"kamadorueda\";\nrepo = \"mailmap-linter\";\nrev = \"e0799aa47ac5ce6776ca8581ba50ace362e5d0ce\";\nsha256 = \"02nr39rn4hicfam1rccbqhn6w6pl25xq7fl2kw0s0ahxzvfk24mh\";\n}\n</code></pre>"},{"location":"api/extensions/fetchers/#fetchgitlab","title":"fetchGitlab","text":"<p>Fetch a commit from the specified Git repository at GitLab.</p> <p>Types:</p> <ul> <li>fetchGitlab (<code>function { ... } -&gt; package</code>):<ul> <li>owner (<code>str</code>):     Owner of the repository.</li> <li>repo (<code>str</code>):     Name of the repository.</li> <li>rev (<code>str</code>):     Commit, branch or tag to fetch.</li> <li>sha256 (<code>str</code>):     SHA256 of the expected output,     In order to get the SHA256     you can omit this parameter and execute Makes,     Makes will tell you the correct SHA256 on failure.</li> </ul> </li> </ul> <p>Example:</p> main.nix <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  fetchGitlab,\n...\n}:\nfetchGitlab {\nowner = \"fluidattacks\";\nrepo = \"product\";\nrev = \"ff231a9bf8aa3f0807f3431b402e7af08d136341\";\nsha256 = \"1sfbif0bchdpw4rlfpv9gs4l4bmg8l24fqh2hg6m39msrvh1w6h3\";\n}\n</code></pre>"},{"location":"api/extensions/fetchers/#fetchnixpkgs","title":"fetchNixpkgs","text":"<p>Fetch a commit from the Nixpkgs repository.</p> Warning <p>By default all licenses in the Nixpkgs repository are accepted. Options to decline individual licenses are provided below.</p> <p>Types:</p> <ul> <li>fetchNixpkgs (<code>function { ... } -&gt; anything</code>):<ul> <li>rev (<code>str</code>):     Commit, branch or tag to fetch.</li> <li>allowUnfree (<code>bool</code>): Optional.     Allow software that do not respect the freedom of its users.     Defaults to <code>true</code>.</li> <li>acceptAndroidSdkLicense (<code>bool</code>): Optional.     Accept the Android SDK license.     Defaults to <code>true</code>.</li> <li>overalys (<code>listOf overlayType</code>): Optional.     Overlays to apply to the Nixpkgs set.     Defaults to <code>[ ]</code>.</li> <li>sha256 (<code>str</code>):     SHA256 of the expected output,     In order to get the SHA256     you can omit this parameter and execute Makes,     Makes will tell you the correct SHA256 on failure.</li> </ul> </li> </ul> <p>Example:</p> main.nix <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  fetchNixpkgs,\n...\n}:\nlet nixpkgs = fetchNixpkgs {\nrev = \"f88fc7a04249cf230377dd11e04bf125d45e9abe\";\nsha256 = \"1dkwcsgwyi76s1dqbrxll83a232h9ljwn4cps88w9fam68rf8qv3\";\n};\nin\nnixpkgs.awscli\n</code></pre>"},{"location":"api/extensions/fetchers/#fetchrubygem","title":"fetchRubyGem","text":"<p>Fetch a Ruby gem from RubyGems.</p> <p>Types:</p> <ul> <li>fetchRubyGem (<code>function { ... } -&gt; package</code>):<ul> <li>sha256 (<code>str</code>):     SHA256 of the expected output,     In order to get the SHA256     you can omit this parameter and execute Makes,     Makes will tell you the correct SHA256 on failure.</li> <li>url (<code>str</code>):     url of the gem to download.</li> </ul> </li> </ul> <p>Example:</p> main.nix <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  fetchRubyGem,\n...\n}:\nfetchRubyGem {\nsha256 = \"04nc8x27hlzlrr5c2gn7mar4vdr0apw5xg22wp6m8dx3wqr04a0y\";\nurl = \"https://rubygems.org/downloads/ast-2.4.2.gem\";\n}\n</code></pre>"},{"location":"api/extensions/format-conversion/","title":"Format conversion","text":""},{"location":"api/extensions/format-conversion/#fromjson","title":"fromJson","text":"<p>Convert a JSON formatted string to a Nix expression.</p> <p>Types:</p> <ul> <li>fromJson (<code>function str -&gt; anything</code>):<ul> <li>(<code>str</code>):     JSON formatted string to convert.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  fromJson,\n  makeDerivation,\n...\n}:\nlet\ndata = fromJson ''\n    {\n      \"name\": \"John\",\n      \"lastName\": \"Doe\",\n      \"tickets\": 3\n    }\n  '';\nin\nmakeDerivation {\nenv = {\nenvName = data.name;\nenvLastName = data.lastName;\nenvTickets = data.tickets;\n};\nbuilder = ''\n    info \"Name is: $envName\"\n    info \"Last name is: $envLastName\"\n    info \"Tickets is: $envTickets\"\n  '';\nname = \"example\";\n}\n</code></pre> <pre><code>$ m . /example\n\n[INFO] Name is: John\n    [INFO] Last name is: Doe\n    [INFO] Tickets is: 3\n</code></pre>"},{"location":"api/extensions/format-conversion/#fromtoml","title":"fromToml","text":"<p>Convert a TOML formatted string to a Nix expression.</p> <p>Types:</p> <ul> <li>fromToml (<code>function str -&gt; anything</code>):<ul> <li>(<code>str</code>):     TOML formatted string to convert.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  fromToml,\n  makeDerivation,\n...\n}:\nlet\ndata = fromToml ''\n    [example]\n    name = \"John\"\n    lastName = \"Doe\"\n    tickets = 3\n  '';\nin\nmakeDerivation {\nenv = {\nenvName = data.example.name;\nenvLastName = data.example.lastName;\nenvTickets = data.example.tickets;\n};\nbuilder = ''\n    info \"Name is: $envName\"\n    info \"Last name is: $envLastName\"\n    info \"Tickets is: $envTickets\"\n  '';\nname = \"example\";\n}\n</code></pre> <pre><code>$ m . /example\n\n[INFO] Name is: John\n    [INFO] Last name is: Doe\n    [INFO] Tickets is: 3\n</code></pre>"},{"location":"api/extensions/format-conversion/#fromyaml","title":"fromYaml","text":"<p>Convert a YAML formatted string to a Nix expression.</p> <p>Types:</p> <ul> <li>fromYaml (<code>function str -&gt; anything</code>):<ul> <li>(<code>str</code>):     YAML formatted string to convert.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  fromYaml,\n  makeDerivation,\n...\n}:\nlet\ndata = fromYaml ''\n    name: \"John\"\n    lastName: \"Doe\"\n    tickets: 3\n  '';\nin\nmakeDerivation {\nenv = {\nenvName = data.name;\nenvLastName = data.lastName;\nenvTickets = data.tickets;\n};\nbuilder = ''\n    info \"Name is: $envName\"\n    info \"Last name is: $envLastName\"\n    info \"Tickets is: $envTickets\"\n  '';\nname = \"example\";\n}\n</code></pre> <pre><code>$ m . /example\n\n[INFO] Name is: John\n    [INFO] Last name is: Doe\n    [INFO] Tickets is: 3\n</code></pre>"},{"location":"api/extensions/format-conversion/#tobasharray","title":"toBashArray","text":"<p>Transform a list of arguments into a Bash array. It can be used for passing several arguments from Nix to Bash.</p> <p>Types:</p> <ul> <li>toBashArray (<code>function (listOf strLike) -&gt; package</code>):<ul> <li>(<code>listOf strLike</code>):     list of arguments     to transform.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  toBashArray,\n  makeDerivation,\n...\n}:\nmakeDerivation {\nenv = {\nenvTargets = toBashArray [ \"first\" \"second\" \"third\" ];\n};\nbuilder = ''\n    source \"$envTargets/template\" export targets\n    for target in \"''${targets[@]}\"; do\n      info \"$target\"\n      info ---\n    done\n  '';\nname = \"example\";\n}\n</code></pre> <pre><code>$ m . /example\n\n[INFO] first\n    [INFO] ---\n    [INFO] second\n    [INFO] ---\n    [INFO] third\n    [INFO] ----\n</code></pre>"},{"location":"api/extensions/format-conversion/#tobashmap","title":"toBashMap","text":"<p>Transform a Nix <code>attrsOf strLike</code> expression into a Bash associative array (map). It can be used for passing several arguments from Nix to Bash. You can combine with toBashArray for more complex structures.</p> <p>Types:</p> <ul> <li>toBashMap (<code>function (attrsOf strLike) -&gt; package</code>):<ul> <li>(<code>attrsOf strLike</code>):     expression to transform.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  toBashMap,\n  makeDerivation,\n...\n}:\nmakeDerivation {\nenv = {\nenvData = toBashMap {\nname = \"Makes\";\ntags = \"ci/cd, framework, nix\";\n};\n};\nbuilder = ''\n    source \"$envData/template\" data\n    for target in \"''${!targets[@]}\"; do\n      info \"$target\"\n      info ---\n    done\n  '';\nname = \"example\";\n}\n</code></pre> <pre><code>$ m . /example\n\n[INFO] key: tags\n  [INFO] value: ci/cd, framework, nix\n  [INFO] ---\n  [INFO] key: name\n  [INFO] value: Makes\n  [INFO] ---\n</code></pre>"},{"location":"api/extensions/format-conversion/#tofilejson","title":"toFileJson","text":"<p>Convert a Nix expression into a JSON file.</p> <p>Types:</p> <ul> <li>toFileJson (<code>function str anything -&gt; package</code>):<ul> <li>(<code>str</code>):     Name of the created file.</li> <li>(<code>anything</code>):     Nix expression to convert.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  toFileJson,\n  makeDerivation,\n...\n}:\nmakeDerivation {\nenv = {\nenvFile = toFileJson \"example.json\" { name = \"value\"; };\n};\nbuilder = ''\n    cat $envFile\n  '';\nname = \"example\";\n}\n</code></pre> <pre><code>$ m . /example\n\n{\"name\": \"value\"}\n</code></pre>"},{"location":"api/extensions/format-conversion/#tofilejsonfromfileyaml","title":"toFileJsonFromFileYaml","text":"<p>Use yq to transform a YAML file into its JSON equivalent.</p> <p>Types:</p> <ul> <li>toFileJsonFromFileYaml (<code>function package -&gt; package</code>):<ul> <li>(<code>package</code>):     YAML file to transform.</li> </ul> </li> </ul> <p>Example:</p> test.yamlmain.nixInvocation <pre><code># /path/to/my/project/makes/example/test.yaml\nname: \"John\"\nlastName: \"Doe\"\ntickets: 3\n</code></pre> <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  makeDerivation,\n  projectPath,\n  toFileJsonFromFileYaml,\n...\n}:\nmakeDerivation {\nenv = {\nenvJson =\n      toFileJsonFromFileYaml\n        (projectPath \"/makes/example/test.yaml\");\n};\nbuilder = ''\n    cat \"$envJson\"\n  '';\nname = \"example\";\n}\n</code></pre> <pre><code>$ m . /example\n\n{\n\"name\": \"John\",\n  \"lastName\": \"Doe\",\n  \"tickets\": 3\n}\n</code></pre>"},{"location":"api/extensions/format-conversion/#tofileyaml","title":"toFileYaml","text":"<p>Convert a Nix expression into a YAML file.</p> <p>Types:</p> <ul> <li>toFileYaml (<code>function str anything -&gt; package</code>):<ul> <li>(<code>str</code>):     Name of the created file.</li> <li>(<code>anything</code>):     Nix expression to convert.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  toFileYaml,\n  makeDerivation,\n...\n}:\nmakeDerivation {\nenv = {\nenvFile = toFileYaml \"example.yaml\" { name = \"value\"; };\n};\nbuilder = ''\n    cat $envFile\n  '';\nname = \"example\";\n}\n</code></pre> <pre><code>$ m . /example\n\nname: value\n</code></pre>"},{"location":"api/extensions/fundamentals/","title":"Fundamentals","text":""},{"location":"api/extensions/fundamentals/#mainnix-format","title":"Main.nix format","text":"<p>Each <code>main.nix</code> file under the <code>makes/</code> directory should be a function that receives one or more arguments and returns a derivation:</p> <pre><code>{\n  argA,\n  argB,\n...\n}:\ndoSomethingAndReturnADerivation\n</code></pre>"},{"location":"api/extensions/fundamentals/#derivations","title":"Derivations","text":"<p>A Nix derivation is the process of:</p> <ul> <li>taking zero or more inputs</li> <li>transforming them as we see fit</li> <li>placing the results in the output path</li> </ul> <p>Derivation outputs live in the <code>/nix/store</code>. Their locations in the filesystem are always in the form: <code>/nix/store/hash123-name</code> where <code>hash123</code> is computed by hashing the derivation's inputs.</p> <p>Derivation outputs are:</p> <ul> <li>A regular file</li> <li>A regular directory that contains arbitrary contents</li> </ul> <p>For instance the derivation output for Bash is: <code>/nix/store/kxj6cblcsd1qcbbxlmbswwrn89zcmgd6-bash-4.4-p23</code> which contains, among other files:</p> <pre><code>/nix/store/kxj6cblcsd1qcbbxlmbswwrn89zcmgd6-bash-4.4-p23\n\u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bash\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sh\n</code></pre>"},{"location":"api/extensions/fundamentals/#makesearchpaths","title":"makeSearchPaths","text":"<p>On Linux software dependencies can be located anywhere in the file system.</p> <p>We can control where programs find other programs, dependencies, libraries, etc, through special environment variables.</p> <p>Below we describe shortly the purpose of the environment variables we currently support.</p> <ul> <li>CLASSPATH:     Location of user-defined classes and packages.</li> <li>CRYSTAL_LIBRARY_PATH:     Location of Crystal libraries.</li> <li>GEM_PATH:     Location of libraries for Ruby.</li> <li>LD_LIBRARY_PATH:     Location of libraries for Dynamic Linking Loaders.</li> <li>MYPYPATH:     Location of library stubs and static types     for MyPy.</li> <li>NODE_PATH:     Location of Node.js modules.</li> <li>OCAMLPATH:     Location of OCaml libraries.</li> <li>CAML_LD_LIBRARY_PATH:     Location of OCaml stublibs.</li> <li>PATH:     Location of directories where executable programs are located.</li> <li>PKG_CONFIG_PATH:     Location of pkg-config packages.</li> <li>PYTHONPATH:     Location of Python modules and site-packages.</li> </ul> <p><code>makeSearchPaths</code> helps you write code like this:</p> <pre><code>makeSearchPaths {\nbin = [ inputs.nixpkgs.git ];\n}\n</code></pre> <p>Instead of this:</p> <pre><code>export PATH=\"/nix/store/m5kp2jhiga25ynk3iq61f4psaqixg7ib-git-2.32.0/bin${PATH:+:}${PATH:-}\"\n</code></pre> <p>Types:</p> <ul> <li>makeSearchPaths (<code>function { ... } -&gt; package</code>):<ul> <li><code>bin</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/bin</code>     of each element in the list     to PATH.     Defaults to <code>[ ]</code>.</li> <li><code>rpath</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/lib</code> and <code>/lib64</code>     of each element in the list     to LD_LIBRARY_PATH.     Defaults to <code>[ ]</code>.</li> <li><code>source</code> (<code>listOf coercibleToStr</code>): Optional.     Source (as in Bash's <code>source</code> command)     each element in the list.     Defaults to <code>[ ]</code>.</li> </ul> </li> </ul> <p>Types specific to Crystal:</p> <ul> <li>makeSearchPaths (<code>function { ... } -&gt; package</code>):<ul> <li><code>crystalLib</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/lib</code>     of each element in the list     to CRYSTAL_LIBRARY_PATH.     Defaults to <code>[ ]</code>.</li> </ul> </li> </ul> <p>Types specific to Java:</p> <ul> <li>makeSearchPaths (<code>function { ... } -&gt; package</code>):<ul> <li><code>javaClass</code> (<code>listOf coercibleToStr</code>): Optional.     Append each element in the list     to CLASSPATH.     Defaults to <code>[ ]</code>.</li> </ul> </li> </ul> <p>Types specific to Kubernetes:</p> <ul> <li>makeSearchPaths (<code>function { ... } -&gt; package</code>):<ul> <li><code>kubeConfig</code> (<code>listOf coercibleToStr</code>): Optional.     Append each element in the list     to KUBECONFIG.     Defaults to <code>[ ]</code>.</li> </ul> </li> </ul> <p>Types specific to pkg-config:</p> <ul> <li>makeSearchPaths (<code>function { ... } -&gt; package</code>):<ul> <li><code>pkgConfig</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/lib/pkgconfig</code>     of each element in the list     to PKG_CONFIG_PATH.     Defaults to <code>[ ]</code>.</li> </ul> </li> </ul> <p>Types specific to OCaml:</p> <ul> <li>makeSearchPaths (<code>function { ... } -&gt; package</code>):<ul> <li><code>ocamlBin</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/bin</code>     of each element in the list     to PATH.     Defaults to <code>[ ]</code>.</li> <li><code>ocamlLib</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/</code>     of each element in the list     to OCAMLPATH.     Defaults to <code>[ ]</code>.</li> <li><code>ocamlStublib</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/stublib</code>     of each element in the list     to CAML_LD_LIBRARY_PATH.     Defaults to <code>[ ]</code></li> </ul> </li> </ul> <p>Types specific to Python:</p> <ul> <li>makeSearchPaths (<code>function { ... } -&gt; package</code>):<ul> <li><code>pythonMypy</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/</code>     of each element in the list     to MYPYPATH.     Defaults to <code>[ ]</code>.</li> <li><code>pythonMypy38</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/lib/python3.8/site-packages</code>     of each element in the list     to MYPYPATH.     Defaults to <code>[ ]</code>.</li> <li><code>pythonMypy39</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/lib/python3.9/site-packages</code>     of each element in the list     to MYPYPATH.     Defaults to <code>[ ]</code>.</li> <li><code>pythonMypy310</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/lib/python3.10/site-packages</code>     of each element in the list     to MYPYPATH.     Defaults to <code>[ ]</code>.</li> <li><code>pythonMypy311</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/lib/python3.11/site-packages</code>     of each element in the list     to MYPYPATH.     Defaults to <code>[ ]</code>.</li> <li><code>pythonPackage</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/</code>     of each element in the list     to PYTHONPATH.     Defaults to <code>[ ]</code>.</li> <li><code>pythonPackage38</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/lib/python3.8/site-packages</code>     of each element in the list     to PYTHONPATH.     Defaults to <code>[ ]</code>.</li> <li><code>pythonPackage39</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/lib/python3.9/site-packages</code>     of each element in the list     to PYTHONPATH.     Defaults to <code>[ ]</code>.</li> <li><code>pythonPackage310</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/lib/python3.10/site-packages</code>     of each element in the list     to PYTHONPATH.     Defaults to <code>[ ]</code>.</li> <li><code>pythonPackage311</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/lib/python3.11/site-packages</code>     of each element in the list     to PYTHONPATH.     Defaults to <code>[ ]</code>.</li> </ul> </li> </ul> <p>Types specific to Node.js:</p> <ul> <li>makeSearchPaths (<code>function { ... } -&gt; package</code>):<ul> <li><code>nodeBin</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/.bin</code>     of each element in the list     to PATH.     Defaults to <code>[ ]</code>.</li> <li><code>nodeModule</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/</code>     of each element in the list     to NODE_PATH.     Defaults to <code>[ ]</code>.</li> </ul> </li> </ul> <p>Types specific to Ruby:</p> <ul> <li>makeSearchPaths (<code>function { ... } -&gt; package</code>):<ul> <li><code>rubyBin</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/bin</code>     of each element in the list     to PATH.     Defaults to <code>[ ]</code>.</li> <li><code>rubyGemPath</code> (<code>listOf coercibleToStr</code>): Optional.     Append <code>/</code>     of each element in the list     to GEM_PATH.     Defaults to <code>[ ]</code>.</li> </ul> </li> </ul> <p>Types for non covered cases:</p> <ul> <li>makeSearchPaths (<code>function { ... } -&gt; package</code>):<ul> <li> <p><code>export</code> (<code>listOf (tuple [ str coercibleToStr str ])</code>): Optional.     Export (as in Bash's <code>export</code> command)     each tuple in the list.</p> <p>Defaults to <code>[ ]</code>.</p> <p>Tuples elements are:</p> <ul> <li>Name of the environment variable to export.</li> <li>Base package to export from.</li> <li>Relative path with respect to the package that should be appended.</li> </ul> </li> </ul> </li> </ul> <p>Example:</p> main.nixtemplate.shEquals to <pre><code>{\n  makeSearchPaths,\n...\n}:\nmakeSearchPaths {\nbin = [ inputs.nixpkgs.git ];\nsource = [\n[ ./template.sh \"a\" \"b\" \"c\" ]\n# add more as you need ...\n];\nexport = [\n[ \"PATH\" inputs.nixpkgs.bash \"/bin\"]\n[ \"CPATH\" inputs.nixpkgs.glib.dev \"/include/glib-2.0\"]\n# add more as you need ...\n];\n}\n</code></pre> <pre><code># /path/to/my/project/makes/example/template\necho \"${@}\"\n</code></pre> <pre><code>export PATH\"/nix/store/...-git/bin${PATH:+:}${PATH:-}\"\nexport PATH=\"/nix/store/...-bash/bin${PATH:+:}${PATH:-}\"\nexport CPATH=\"/nix/store/...-glib-dev/include/glib-2.0${CPATH:+:}${CPATH:-}\"\nif test -e \"/nix/store/...-template/template\"\nthen source \"/nix/store/...-template/template\" '1' '2' '3'\nelse source \"/nix/store/...-template\" '1' '2' '3'\nfi\n</code></pre>"},{"location":"api/extensions/fundamentals/#makederivation","title":"makeDerivation","text":"<p>Perform a build step in an isolated environment:</p> <ul> <li>External environment variables are not visible by the builder script.     This means you can't use secrets here.</li> <li>Search Paths as in <code>makeSearchPaths</code> are completely empty.</li> <li>The <code>HOME</code> environment variable is set to <code>/homeless-shelter</code>.</li> <li>Only GNU coreutils commands (cat, echo, ls, ...)     are present by default.</li> <li>An environment variable called <code>out</code> is present     and represents the derivation's output.     The derivation must produce an output,     may be a file, or a directory.</li> <li> <p>Convenience bash functions are exported:</p> <ul> <li><code>echo_stderr</code>: Like <code>echo</code> but to standard error.</li> <li><code>debug</code>: Like <code>echo_stderr</code> but with a <code>[DEBUG]</code> prefix.</li> <li><code>info</code>: Like <code>echo_stderr</code> but with a <code>[INFO]</code> prefix.</li> <li><code>warn</code>: Like <code>echo_stderr</code> but with a <code>[WARNING]</code> prefix.</li> <li><code>error</code>: Like <code>echo_stderr</code> but with a <code>[ERROR]</code> prefix.     Returns exit code 1 to signal failure.</li> <li><code>critical</code>: Like <code>echo_stderr</code> but with a <code>[CRITICAL]</code> prefix.     Exits immediately with exit code 1, aborting the entire execution.</li> <li><code>copy</code>: Like <code>cp</code> but making paths writeable after copying them.</li> <li> <p><code>require_env_var</code>: <code>error</code>s when the specified env var is not set,     or set to an empty value.</p> <pre><code>require_env_var USERNAME\n</code></pre> </li> </ul> </li> <li> <p>After the build, for all paths in <code>$out</code>:</p> <ul> <li>User and group ownership are removed</li> <li>Last-modified timestamps are reset to <code>1970-01-01T00:00:00+00:00</code>.</li> </ul> </li> </ul> <p>Types:</p> <ul> <li>makeDerivation (<code>function { ... } -&gt; package</code>):<ul> <li>builder (<code>either str package</code>):     A Bash script that performs the build step.</li> <li>env (<code>attrsOf str</code>): Optional.     Environment variables that will be propagated to the <code>builder</code>.     Variable names must start with <code>env</code>.     Defaults to <code>{ }</code>.</li> <li>local (<code>bool</code>): Optional.     Should we always build locally this step?     Thus effectively ignoring any configured binary caches.     Defaults to <code>false</code>.</li> <li>name (<code>str</code>):     Custom name to assign to the build step, be creative, it helps in debugging.</li> <li>searchPaths (<code>asIn makeSearchPaths</code>): Optional.     Arguments here will be passed as-is to <code>makeSearchPaths</code>.     Defaults to <code>makeSearchPaths</code>'s defaults.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  inputs,\n  makeDerivation,\n...\n}:\nmakeDerivation {\nenv = {\nenvVersion = \"1.0\";\n};\nbuilder = ''\n    debug Version is $envVersion\n    info Running tree command on $PWD\n    mkdir dir\n    touch dir/file\n    tree dir &gt; $out\n  '';\nname = \"example\";\nsearchPaths = {\nbin = [ inputs.nixpkgs.tree ];\n};\n}\n</code></pre> <pre><code>$ m . /example\n\n[DEBUG] Version is 1.0\n    [INFO] Running tree command on /tmp/nix-build-example.drv-0\n    /nix/store/30hg7hzn6d3zmfva1bl4zispqilbh3nm-example\n\n$ cat /nix/store/30hg7hzn6d3zmfva1bl4zispqilbh3nm-example\n    dir\n    `-- file\n\n0 directories, 1 file\n</code></pre>"},{"location":"api/extensions/fundamentals/#maketemplate","title":"makeTemplate","text":"<p>Replace placeholders with the specified values in a file of any format.</p> <p>Types:</p> <ul> <li>makeTemplate (<code>function { ... } -&gt; package</code>):<ul> <li>local (<code>bool</code>): Optional.     Should we always build locally this step?     Thus effectively ignoring any configured binary caches.     Defaults to <code>true</code>.</li> <li>name (<code>str</code>):     Custom name to assign to the build step, be creative, it helps in debugging.</li> <li>replace (<code>attrsOf strLike</code>): Optional.     Placeholders will be replaced in the script with their respective value.     Variable names must start with <code>__arg</code>, end with <code>__</code>     and have at least 6 characters long.     Defaults to <code>{ }</code>.</li> <li>template (<code>either str package</code>):     A string, file, output or package     in which placeholders will be replaced.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  inputs,\n  makeTemplate,\n...\n}:\nmakeTemplate {\nname = \"example\";\nreplace = {\n__argBash__ = inputs.nixpkgs.bash;\n__argVersion__ = \"1.0\";\n};\ntemplate = ''\n    Bash is: __argBash__\n    Version is: __argVersion__\n  '';\n}\n</code></pre> <pre><code>$ m . /example\n\nBash is: /nix/store/kxj6cblcsd1qcbbxlmbswwrn89zcmgd6-bash-4.4-p23\n    Version is: 1.0\n</code></pre>"},{"location":"api/extensions/fundamentals/#makescript","title":"makeScript","text":"<p>Wrap a Bash script that runs in a almost-isolated environment.</p> <ul> <li>The file system is not isolated, the script runs in user-space.</li> <li>External environment variables are visible by the script.     You can use this to propagate secrets.</li> <li>Search Paths as in <code>makeSearchPaths</code> are completely empty.</li> <li>The <code>HOME_IMPURE</code> environment variable is set to the user's home directory.</li> <li>The <code>HOME</code> environment variable is set to a temporary directory.</li> <li>Only GNU coreutils commands (cat, echo, ls, ...)     are present by default.</li> <li>An environment variable called <code>STATE</code> points to a directory     that can be used to store the script's state (if any).     That state can be optionally persisted.     That state can be optionally shared across repositories.</li> <li> <p>Convenience bash functions are exported:</p> <ul> <li> <p><code>running_in_ci_cd_provider</code>:     Detects if we are running on the CI/CD provider (gitlab/github/etc).</p> <pre><code>if running_in_ci_cd_provider; then\n# ci/cd logic\nelse\n# non ci/cd logic\nfi\n</code></pre> </li> <li> <p><code>prompt_user_for_confirmation</code>:     Warns the user about a possibly destructive action     that will be executed soon     and aborts if the user does not confirm aproppriately.</p> <p>This function assumes a positive answer when running on the CI/CD provider because there is no human interaction.     - <code>prompt_user_for_input</code>: Ask the user to type information or optionally use a default value by pressing ENTER.</p> <p>This function assumes the default value when running on the CI/CD provider because there is no human interaction.</p> <pre><code>user_supplied_input=\"$(prompt_user_for_input \"default123123\")\"\ninfo Supplied input: \"${user_supplied_input}\"\n</code></pre> </li> </ul> </li> <li> <p>After the build, the script is executed.</p> </li> </ul> <p>Types:</p> <ul> <li>makeScript (<code>function { ... } -&gt; package</code>):<ul> <li>entrypoint (<code>either str package</code>):     A Bash script that performs the build step.</li> <li>name (<code>str</code>):     Custom name to assign to the build step, be creative, it helps in debugging.</li> <li>replace (<code>attrsOf strLike</code>): Optional.     Placeholders will be replaced in the script with their respective value.     Variable names must start with <code>__arg</code>, end with <code>__</code>     and have at least 6 characters long.     Defaults to <code>{ }</code>.</li> <li>searchPaths (<code>asIn makeSearchPaths</code>): Optional.     Arguments here will be passed as-is to <code>makeSearchPaths</code>.     Defaults to <code>makeSearchPaths</code>'s defaults.</li> <li>persistState (<code>bool</code>): Optional.     If true, state will not be cleared before each script run.     Defaults to <code>false</code>.</li> <li> <p>globalState (<code>bool</code>): Optional.     If true, script state will be written to <code>globalStateDir</code> and     to <code>projectStateDir</code> otherwise.     Defaults to <code>false</code>, if <code>projectStateDir</code> is specified or derived.</p> <p>Note:</p> <ul> <li>It is implicitly <code>true</code>, if <code>projectStateDir == globalStateDir</code>.</li> <li><code>projectStateDir == globalStateDir</code> is the default if   <code>projectIdentifier</code> is not configured.</li> <li>Hence, generally enable project local state by<ul> <li>either setting <code>projectIdentifier</code></li> <li>or <code>projectStateDir</code> different from <code>globalStateDir</code>.</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  inputs,\n  makeScript,\n...\n}:\nmakeScript {\nreplace = {\n__argVersion__ = \"1.0\";\n};\nentrypoint = ''\n    debug Version is __argVersion__\n    info pwd is $PWD\n    info Running tree command on $STATE\n    mkdir $STATE/dir\n    touch $STATE/dir/file\n    tree $STATE\n  '';\nname = \"example\";\nsearchPaths = {\nbin = [ inputs.nixpkgs.tree ];\n};\n}\n</code></pre> <pre><code>$ m . /example\n\n[DEBUG] Version is 1.0\n    [INFO] pwd is /data/github/fluidattacks/makes\n    [INFO] Running tree command on /home/user/.makes/state/example\n    /home/user/.makes/state/example\n    \u2514\u2500\u2500 dir\n        \u2514\u2500\u2500 file\n\n1 directory, 1 file\n</code></pre>"},{"location":"api/extensions/fundamentals/#projectpath","title":"projectPath","text":"<p>Copy a path from the current Makes project being evaluated to the Nix store in the most pure and reproducible way possible.</p> <p>Types:</p> <ul> <li>projectPath (<code>function str -&gt; package</code>):<ul> <li>(<code>str</code>):     Absolute path, assumming the repository is located at <code>\"/\"</code>.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># Consider the following path within the repository: /src/nix\n# /path/to/my/project/makes/example/main.nix\n{\n  makeScript,\n  projectPath,\n...\n}:\nmakeScript {\nreplace = {\n__argPath__ = projectPath \"/src/nix\";\n};\nentrypoint = ''\n    info Path is: __argPath__\n    info Path contents are:\n    ls __argPath__\n  '';\nname = \"example\";\n}\n</code></pre> <pre><code>$ m . /example\n\n[INFO] Path is: &lt;nix-store-path&gt;\n    [INFO] Path contents are:\n    packages.nix  sources.json  sources.nix\n</code></pre>"},{"location":"api/extensions/node.js/","title":"Node.js","text":""},{"location":"api/extensions/node.js/#makenodejsversion","title":"makeNodeJsVersion","text":"<p>Get a specific Node.js version interpreter.</p> <p>Types:</p> <ul> <li>makeNodeJsVersion (<code>function str -&gt; package</code>):<ul> <li>(<code>enum [ \"14\" \"16\" \"18\" ]</code>):     Node.js version to use.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  makeNodeJsVersion,\n  makeScript,\n...\n}:\nmakeScript {\nentrypoint = ''\n    node --version\n  '';\nname = \"example\";\nsearchPaths = {\nbin = [ (makeNodeJsVersion \"16\") ];\n};\n}\n</code></pre> <pre><code>$ m . /example\n\nv16.2.0\n</code></pre>"},{"location":"api/extensions/node.js/#makenodejsmodules","title":"makeNodeJsModules","text":"<p>Cook the <code>node_modules</code> directory for the given Node.js project.</p> <p>Types:</p> <ul> <li>makeNodeJsModules (<code>function { ... } -&gt; package</code>):<ul> <li>name (<code>str</code>):     Custom name to assign to the build step, be creative, it helps in debugging.</li> <li>nodeJsVersion (<code>enum [ \"14\" \"16\" \"18\" ]</code>):     Node.js version to use.</li> <li>packageJson (<code>package</code>):     Path to the <code>package.json</code> of your project.</li> <li>packageLockJson (<code>package</code>):     Path to the <code>package-lock.json</code> of your project.</li> <li>searchPaths (<code>asIn makeSearchPaths</code>): Optional.     Arguments here will be passed as-is to <code>makeSearchPaths</code>.     Defaults to <code>makeSearchPaths</code>'s defaults.</li> <li>shouldIgnoreScripts (<code>bool</code>): Optional.     Enable to propagate the <code>--ignore-scripts true</code> flag to npm.     Defaults to <code>false</code>.</li> </ul> </li> </ul> <p>Example:</p> package.jsonpackage-lock.jsonmain.nixInvocation <pre><code># /path/to/my/project/makes/example/package.json\n{\n\"dependencies\": {\n\"hello-world-npm\": \"*\"\n}\n}\n</code></pre> <pre><code># /path/to/my/project/makes/example/package-lock.json\n{\n\"requires\": true,\n\"lockfileVersion\": 1,\n\"dependencies\": {\n\"hello-world-npm\": {\n\"version\": \"1.1.1\",\n\"resolved\": \"https://registry.npmjs.org/hello-world-npm/-/hello-world-npm-1.1.1.tgz\",\n\"integrity\": \"sha1-JQgw7wAItDftk+a+WZk0ua0Lkwg=\"\n}\n}\n}\n</code></pre> <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  makeNodeJsModules,\n  makeScript,\n  projectPath,\n...\n}:\nlet\nhello = makeNodeJsModules {\nname = \"hello-world-npm\";\nnodeJsVersion = \"16\";\npackageJson =\n      projectPath \"/path/to/my/project/makes/example/package.json\";\npackageLockJson =\n      projectPath \"/path/to/my/project/makes/example/package-lock.json\";\n};\nin\nmakeScript {\nreplace = {\n__argHello__ = hello;\n};\nentrypoint = ''\n    ls __argHello__\n  '';\nname = \"example\";\n}\n</code></pre> <pre><code>$ m . /example\n\nhello-world-npm\n</code></pre>"},{"location":"api/extensions/node.js/#makenodejsenvironment","title":"makeNodeJsEnvironment","text":"<p>Setup a <code>makeNodeJsModules</code> in the environment using <code>makeSearchPaths</code>. It appends:</p> <ul> <li><code>node</code> to <code>PATH</code>.</li> <li><code>node_modules/.bin</code> to <code>PATH</code>.</li> <li><code>node_modules</code> to NODE_PATH.</li> </ul> <p>Pre-requisites: Generating a package-lock.json</p> <p>Types:</p> <ul> <li>makeNodeJsEnvironment (<code>function { ... } -&gt; package</code>):<ul> <li>name (<code>str</code>):     Custom name to assign to the build step, be creative, it helps in debugging.</li> <li>nodeJsVersion (<code>enum [ \"14\" \"16\" \"18\" ]</code>):     Node.js version to use.</li> <li>packageJson (<code>package</code>):     Path to the <code>package.json</code> of your project.</li> <li>packageLockJson (<code>package</code>):     Path to the <code>package-lock.json</code> of your project.</li> <li>searchPaths (<code>asIn makeSearchPaths</code>): Optional.     Arguments here will be passed as-is to <code>makeSearchPaths</code>.     Defaults to <code>makeSearchPaths</code>'s defaults.</li> <li>shouldIgnoreScripts (<code>bool</code>): Optional.     Enable to propagate the <code>--ignore-scripts true</code> flag to npm.     Defaults to <code>false</code>.</li> </ul> </li> </ul> <p>Example:</p> package.jsonpackage-lock.jsonmain.nixInvocation <pre><code># /path/to/my/project/makes/example/package.json\n{\n\"dependencies\": {\n\"hello-world-npm\": \"*\"\n}\n}\n</code></pre> <pre><code># /path/to/my/project/makes/example/package-lock.json\n{\n\"requires\": true,\n\"lockfileVersion\": 1,\n\"dependencies\": {\n\"hello-world-npm\": {\n\"version\": \"1.1.1\",\n\"resolved\": \"https://registry.npmjs.org/hello-world-npm/-/hello-world-npm-1.1.1.tgz\",\n\"integrity\": \"sha1-JQgw7wAItDftk+a+WZk0ua0Lkwg=\"\n}\n}\n}\n</code></pre> <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  makeNodeJsEnvironment,\n  makeScript,\n...\n}:\nlet\nhello = makeNodeJsEnvironment {\nname = \"hello-world-npm\";\nnodeJsVersion = \"16\";\npackageJson =\n      projectPath \"/path/to/my/project/makes/example/package.json\";\npackageLockJson =\n      projectPath \"/path/to/my/project/makes/example/package-lock.json\";\n};\nin\nmakeScript {\nentrypoint = ''\n    hello-world-npm\n  '';\nname = \"example\";\nsearchPaths = {\nsource = [ hello ];\n};\n}\n</code></pre> <pre><code>$ m . /example\n\nHello World NPM\n</code></pre>"},{"location":"api/extensions/others/","title":"Others","text":""},{"location":"api/extensions/others/#calculatecvss3","title":"calculateCvss3","text":"<p>Calculate CVSS3 score and severity for a CVSS3 Vector String.</p> <p>Types:</p> <ul> <li>calculateCvss3 (<code>function str -&gt; package</code>):<ul> <li>(<code>str</code>):     CVSS3 Vector String     to calculate.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  makeScript,\n  calculateCvss3,\n...\n}:\nmakeScript {\nreplace = {\n__argCalculate__ = calculateCvss3\n      \"CVSS:3.0/S:C/C:H/I:H/A:N/AV:P/AC:H/PR:H/UI:R/E:H/RL:O/RC:R/CR:H/IR:X/AR:X/MAC:H/MPR:X/MUI:X/MC:L/MA:X\";\n};\nentrypoint = ''\n    cat \"__argCalculate__\"\n  '';\nname = \"example\";\n}\n</code></pre> <pre><code>$ m . /example\n\n{\"score\": {\"base\": 6.5, \"temporal\": 6.0, \"environmental\": 5.3}, \"severity\": {\"base\": \"Medium\", \"temporal\": \"Medium\", \"environmental\": \"Medium\"}}\n</code></pre>"},{"location":"api/extensions/others/#chunks","title":"chunks","text":"<p>Split a given list into N chunks for workload distributed parallelization.</p> <p>Types:</p> <ul> <li>chunks (<code>function list, ints.positive -&gt; listOf (listOf Any)</code>):<ul> <li>(<code>list</code>):     List to split into chunks.</li> <li>(<code>ints.positive</code>):     Number of chunks to create from list.</li> </ul> </li> </ul> <p>Example:</p> main.nix <pre><code>{\n  chunks,\n  inputs,\n  makeDerivation,\n  makeDerivationParallel,\n...\n}: let\nnumbers = [0 1 2 3 4 5 6 7 8 9];\nmyChunks =  chunks numbers 3; # [[0 1 2 3] [4 5 6] [7 8 9]]\nbuildNumber = n: makeDerivation {\nname = \"build-number-${n}\";\n  env.envNumber = n;\nbuilder = ''\n    echo \"$envNumber\"\n    touch \"$out\"\n  '';\n};\nin\n  makeDerivationParallel {\ndependencies = builtins.map buildNumber (inputs.nixpkgs.lib.lists.elemAt myChunks 0);\nname = \"build-numbers-0\";\n}\n</code></pre>"},{"location":"api/extensions/others/#libgit","title":"libGit","text":"<p>A small template for doing git kung-fu.</p> <p>Types:</p> <ul> <li> <p>libGit (<code>package</code>):   A package that can be sourced to setup functions in the current scope.   The list of available functions is documented below:</p> <ul> <li> <p><code>is_git_repository</code>:     Return 0 if the provided path is a git repository.</p> <pre><code>if is_git_repository /path/to/anywhere; then\n# custom logic\nfi\n</code></pre> </li> <li> <p><code>require_git_repository</code>:     Stops the execution     if the provided path is not a git repository.</p> <pre><code>require_git_repository /path/to/anywhere\n</code></pre> </li> <li> <p><code>get_abbrev_rev</code>:     If available, returns an abbreviated name for the provided revision.     Otherwise returns the revision unchanged.</p> <pre><code># Would return main, trunk, develop, etc\nget_abbrev_rev /path/to/anywhere HEAD\n</code></pre> </li> <li> <p><code>get_commit_from_rev</code>:     If available, returns the full commit of the provided revision.     Otherwise returns an error.</p> <pre><code># Would return the full commit (e026a413...)\nget_commit_from_rev /path/to/anywhere HEAD\n</code></pre> </li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  libGit,\n  makeScript,\n...\n}:\nmakeScript {\nentrypoint = ''\n    require_git_repository /some-path-that-do-not-exists\n    echo other business logic goes here ...\n  '';\nname = \"example\";\nsearchPaths = {\nsource = [ libGit ];\n};\n}\n</code></pre> <pre><code>$ m . /example\n\n[CRITICAL] We require a git repository, but this one is not: /some-path-that-do-not-exists\n</code></pre>"},{"location":"api/extensions/others/#makesslcertificate","title":"makeSslCertificate","text":"<p>Self sign certificates by using the <code>openssl req</code> command, then using <code>openssl x509</code> to print out the certificate in text form.</p> <p>Types:</p> <ul> <li>makeSslCertificate (<code>function { ... } -&gt; package</code>):<ul> <li>days (<code>ints.positive</code>): Optional.     Ammount of days to certify the certificate for.     Defaults to <code>30</code>.</li> <li>keyType (<code>str</code>): Optional.     Defines the key type for the certificate     (option used for the <code>-newkey</code> option on the <code>req</code> command).     It uses the form <code>rsa:nbits</code>, where <code>nbits</code> is the number of bits.     Defaults to <code>rsa:4096</code>.</li> <li>name (<code>str</code>):     Custom name to assign to the build step, be creative, it helps in debugging.</li> <li>options (<code>listOf (listOf str)</code>):     Contains a list of options to create the certificate with your own needs.     Here you can use the same options used with <code>openssl req</code>.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  makeScript,\n  makeSslCertificate,\n...\n}:\nlet\nsslCertificate = makeSslCertificate {\nname = \"name-example\";\noptions = [\n[ \"-subj\" \"/CN=localhost\" ]\n];\n};\nin\nmakeScript {\nreplace = {\n__argSslCertificate__ = sslCertificate;\n};\nentrypoint = ''\n    cat \"__argSslCertificate__\"\n  '';\nname = \"example\";\n}\n</code></pre> <pre><code>$ m . /example\n\n-----BEGIN PRIVATE KEY-----\n    ...\n    -----END PRIVATE KEY-----\n</code></pre>"},{"location":"api/extensions/others/#pathshebangs","title":"pathShebangs","text":"<p>Replace common shebangs for their Nix equivalent.</p> <p>For example:</p> <ul> <li><code>/bin/env xxx</code> -&gt; <code>/nix/store/..-name/bin/xxx</code></li> <li><code>/usr/bin/env xxx</code> -&gt; <code>/nix/store/..-name/bin/xxx</code></li> <li><code>/path/to/my/xxx</code> -&gt; <code>/nix/store/..-name/bin/xxx</code></li> </ul> <p>Types:</p> <ul> <li>pathShebangs (<code>package</code>):     When sourced,     it exports a Bash function called <code>patch_shebangs</code>     into the evaluation context.     This function receives one or more files or directories as arguments     and replace shebangs of the executable files in-place.     Note that only shebangs that resolve to executables in the <code>\"${PATH}\"</code>     (a.k.a. <code>searchPaths.bin</code>) will be taken into account.</li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  __nixpkgs__,\n  makeDerivation,\n  patchShebangs,\n...\n}:\nmakeDerivation {\nenv = {\nenvFile = builtins.toFile \"my_file.sh\" ''\n      #! /usr/bin/env bash\n      echo Hello!\n    '';\n};\nbuilder = ''\n    copy $envFile $out\n    chmod +x $out\n    patch_shebangs $out\n    cat $out\n  '';\nname = \"example\";\nsearchPaths = {\nbin = [ __nixpkgs__.bash ]; # Propagate bash so `patch_shebangs` \"sees\" it\nsource = [ patchShebangs ];\n};\n}\n</code></pre> <pre><code>$ m . /example\n\n#! /nix/store/dpjnjrqbgbm8a5wvi1hya01vd8wyvsq4-bash-4.4-p23/bin/bash\necho Hello!\n</code></pre>"},{"location":"api/extensions/others/#sublist","title":"sublist","text":"<p>Return a sublist of a given list using a starting and an ending index.</p> <p>Types:</p> <ul> <li>sublist (<code>function list, ints.positive, ints.positive -&gt; listOf Any</code>):<ul> <li>(<code>list</code>):     List to get sublist from.</li> <li>(<code>ints.positive</code>):     Starting list index.</li> <li>(<code>ints.positive</code>):     Ending list index.</li> </ul> </li> </ul> <p>Example:</p> main.nix <pre><code>{\n  sublist,\n...\n}: let\nlist = [0 1 2 3 4 5 6 7 8 9];\nsublist = sublist list 3 5; # [3 4]\nin {\ninherit sublist;\n}\n</code></pre>"},{"location":"api/extensions/python/","title":"Python","text":""},{"location":"api/extensions/python/#makepythonversion","title":"makePythonVersion","text":"<p>Get a specific Python interpreter.</p> <p>Types:</p> <ul> <li>makePythonVersion (<code>function str -&gt; package</code>):<ul> <li>(<code>enum [\"3.8\" \"3.9\" \"3.10\" \"3.11\"]</code>):     Python version of the interpreter to return.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  makePythonVersion,\n  makeScript,\n...\n}:\nmakeScript {\nentrypoint = ''\n    python --version\n  '';\nname = \"example\";\nsearchPaths = {\nbin = [ (makePythonVersion \"3.8\") ];\n};\n}\n</code></pre> <pre><code>$ m . /example\n\nPython 3.8.9\n</code></pre>"},{"location":"api/extensions/python/#makepythonpypienvironment","title":"makePythonPypiEnvironment","text":"<p>Create a virtual environment where a provided set of Python packages from PyPi is installed.</p> <p>Pre-requisites: Generating a sourcesYaml</p> <p>Types:</p> <ul> <li>makePythonPypiEnvironment (<code>function { ... } -&gt; package</code>):<ul> <li>name (<code>str</code>):     Custom name to assign to the build step, be creative, it helps in debugging.</li> <li>searchPathsBuild (<code>asIn makeSearchPaths</code>): Optional.     Arguments here will be passed as-is to <code>makeSearchPaths</code>     and used while installing the Python dependencies.     Defaults to <code>makeSearchPaths</code>'s defaults.</li> <li>searchPathsRuntime (<code>asIn makeSearchPaths</code>): Optional.     Arguments here will be passed as-is to <code>makeSearchPaths</code>     and propagated to the runtime environment.     Defaults to <code>makeSearchPaths</code>'s defaults.</li> <li>sourcesYaml (<code>package</code>):     <code>sources.yaml</code> file     computed as explained in the pre-requisites section.</li> </ul> </li> </ul> <p>For building a few special packages you may need to boostrap   dependencies in the build environment.   The following flags are available for convenience:</p> <pre><code>- withCython_0_29_24 (`bool`): Optional.\n    Bootstrap cython 0.29.24 to the environment\n    Defaults to `false`.\n- withNumpy_1_24_0 (`bool`): Optional.\n    Bootstrap numpy 1.24.0 to the environment\n    Defaults to `false`.\n- withSetuptools_67_7_2 (`bool`): Optional.\n    Bootstrap setuptools 67.7.2 to the environment\n    Defaults to `false`.\n- withSetuptoolsScm_7_1_0 (`bool`) Optional.\n    Bootstrap setuptools-scm 7.1.0 to the environment\n    Defaults to `false`.\n- withWheel_0_40_0 (`bool`): Optional.\n    Bootstrap wheel 0.40.0 to the environment\n    Defaults to `false`.\n</code></pre> <p>Example:</p> main.nix <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  inputs,\n  makePythonPypiEnvironment,\n  projectPath,\n...\n}:\nmakePythonPypiEnvironment {\nname = \"example\";\n# If some packages require compilers to be built,\n# you can provide them like this:\nsearchPathsBuild = {\nbin = [ inputs.nixpkgs.gcc ];\n};\n# You can propagate packages to the runtime environment if needed, too\nsearchPathsRuntime = {\nbin = [ inputs.nixpkgs.htop ];\n};\nsourcesYaml = projectPath \"/makes/example/sources.yaml\";\n# Other packages require a few bootstrapped dependencies,\n# enable them like this:\nwithCython_0_29_24 = true;\nwithSetuptools_67_7_2 = true;\nwithSetuptoolsScm_7_1_0 = true;\nwithWheel_0_40_0 = true;\n}\n</code></pre> Tip <p>Refer to makePythonLock to learn how to generate a <code>sourcesYaml</code>.</p>"},{"location":"api/extensions/ruby/","title":"Ruby","text":""},{"location":"api/extensions/ruby/#makerubyversion","title":"makeRubyVersion","text":"<p>Get a specific Ruby interpreter.</p> <p>Types:</p> <ul> <li>makeRubyVersion (<code>function str -&gt; package</code>):<ul> <li>(<code>enum [ \"2.7\" \"3.0\" \"3.1\" ]</code>):     Version of the Ruby interpreter.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  makeRubyVersion,\n  makeScript,\n...\n}:\nmakeScript {\nentrypoint = ''\n    ruby --version\n  '';\nname = \"example\";\nsearchPaths = {\nbin = [ (makeRubyVersion \"2.7\") ];\n};\n}\n</code></pre> <pre><code>$ m . /example\n\nruby 2.6.8p205 (2021-07-07) [x86_64-linux]\n</code></pre>"},{"location":"api/extensions/ruby/#makerubygemsinstall","title":"makeRubyGemsInstall","text":"<p>Fetch and install the specified Ruby gems from the RubyGems.</p> <p>Types:</p> <ul> <li>makeRubyGemsInstall (<code>function { ... } -&gt; package</code>):<ul> <li>name (<code>str</code>):     Custom name to assign to the build step, be creative, it helps in debugging.</li> <li>ruby (<code>enum [ \"2.7\" \"3.0\" ]</code>):     Version of the Ruby interpreter.</li> <li>searchPaths (<code>asIn makeSearchPaths</code>): Optional.     Arguments here will be passed as-is to <code>makeSearchPaths</code>.     Defaults to <code>makeSearchPaths</code>'s defaults.</li> <li>sourcesYaml (<code>package</code>):     <code>sources.yaml</code> file     computed as explained in the pre-requisites section.</li> </ul> </li> </ul> <p>Example:</p> main.nix <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  makeRubyGemsInstall,\n...\n}:\nmakeRubyGemsInstall {\nname = \"example\";\nruby = \"3.0\";\nsourcesYaml = projectPath \"/makes/example/sources.yaml\";\n}\n</code></pre> Tip <p>Refer to makeRubyLock to learn how to generate a <code>sourcesYaml</code>.</p>"},{"location":"api/extensions/ruby/#makerubygemsenvironment","title":"makeRubyGemsEnvironment","text":"<p>Create an environment where the specified Ruby gems from RubyGems are available.</p> <p>Types:</p> <ul> <li>makeRubyGemsEnvironment (<code>function { ... } -&gt; package</code>):<ul> <li>name (<code>str</code>):     Custom name to assign to the build step, be creative, it helps in debugging.</li> <li>ruby (<code>enum [ \"2.7\" \"3.0\" ]</code>):     Version of the Ruby interpreter.</li> <li>searchPathsBuild (<code>asIn makeSearchPaths</code>): Optional.     Arguments here will be passed as-is to <code>makeSearchPaths</code>     and used while installing gems.     Defaults to <code>makeSearchPaths</code>'s defaults.</li> <li>searchPathsRuntime (<code>asIn makeSearchPaths</code>): Optional.     Arguments here will be passed as-is to <code>makeSearchPaths</code>     and propagated to the runtime environment.     Defaults to <code>makeSearchPaths</code>'s defaults.</li> <li>sourcesYaml (<code>package</code>):     <code>sources.yaml</code> file     computed as explained in the pre-requisites section.</li> </ul> </li> </ul> <p>Example:</p> main.nixInvocation <pre><code># /path/to/my/project/makes/example/main.nix\n{\n  inputs,\n  makeRubyGemsEnvironment,\n  makeScript,\n...\n}:\nlet\nenv = makeRubyGemsEnvironment {\nname = \"example\";\nruby = \"3.0\";\n    searchPathsBuild.bin = [ inputs.nixpkgs.gcc ];\n    searchPathsRuntime.rpath = [ inputs.nixpkgs.gcc.cc.lib ];\nsourcesYaml = projectPath \"/makes/example/sources.yaml\";\n};\nin\nmakeScript {\nentrypoint = ''\n    slimrb --version\n  '';\nname = \"example\";\n  searchPaths.source = [ env ];\n}\n</code></pre> <pre><code>$ m . /example\n\nSlim 4.1.0\n</code></pre> Tip <p>Refer to makeRubyLock to learn how to generate a <code>sourcesYaml</code>.</p>"},{"location":"security/","title":"Introduction","text":"<p>This section evaluates Makes using various standards and tries to address the security of Makes as an ecosystem using the three following categories:</p> <ul> <li>Security of using the Makes CLI.</li> <li>Security of the software built using Makes.</li> <li>Security of Makes as a software project.</li> </ul>"},{"location":"security/assurance/","title":"Software Assurance","text":"<p>This is what user can expect from Makes in terms of security, the notation is that of a Structured Assurance Case Model[^1].</p> <ul> <li> <p>The Makes CLI application is free of known security vulnerabilities.</p> <ul> <li> <p>The Python code of the Makes CLI application     is free of known security vulnerabilities.</p> <ul> <li> <p>SonarCloud     reviews every pull request.</p> <p>Proof:</p> <ul> <li> <p>You can check the     SonarCloud pull requests list for Makes</p> </li> <li> <p>You can check the     pull requests history     and see if the latest pull requests     have a comment     from SonarCloud.     For example:     PR 925, Comment 1256837172</p> </li> </ul> </li> <li> <p>Vulnerabilities count on SonarCloud is zero.</p> <p>Proof:</p> <ul> <li>Visit the SonarCloud dashboard.     The vulnerabilities count should be zero.</li> </ul> </li> </ul> </li> <li> <p>The dependencies of the Makes CLI application     are free of known security vulnerabilities.</p> <ul> <li> <p>Dependabot alerts     are enabled for the repository.</p> <p>Proof:</p> <ul> <li>As a project maintainer,     you can see if Dependabot is enabled     here.</li> <li>As an external user,     there is no way to verify     if Dependabot is enabled     because the configuration page for this     is only available to repository maintainers.     However,     it is possible to see the pull requests created by the bot,     for example:     PR 927.     Additionally,     an external user could check     if there has been Dependabot pull requests recently     by checking the     pull requests history.     It is important to note     that if no recent pull requests exist     it may mean     that no known security vulnerabilities have been found,     and not necessarily that this claim is false.</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"security/assurance/#references","title":"References","text":"<p>[^1]:</p> <p>Rhodes, T. , Boland Jr., F. , Fong, E. and Kass, M. (2009), Software Assurance Using Structured Assurance Case Models, NIST Interagency/Internal Report (NISTIR), National Institute of Standards and Technology, Gaithersburg, MD, [online], https://tsapps.nist.gov/publication/get_pdf.cfm?pub_id=902688 (Accessed September 23, 2022)</p>"},{"location":"security/design-principles/","title":"Design Principles","text":""},{"location":"security/design-principles/#least-privilege","title":"Least Privilege","text":"<ul> <li> <p>The Makes CLI is a python application that runs in user-space.   The privileges required are:</p> <ul> <li>Write access to the <code>${HOME}</code>,   which is normally owned by the user,   so no extra privileges   other than what the user already has are required.</li> <li>Creating temporary files/directories,   which respects the <code>${TMPDIR}</code> environment variable,   which is a functionality normally available to a user,   so no extra privileges are required.</li> <li>A system with Nix installed.</li> <li>(optional) privileges to create Kernel namespaces.</li> </ul> </li> <li> <p>The Makes framework is simply a library   that aids the developer in creating build scripts,   so no privileges are required,   the Makes framework is just source code   that the user can opt-in to use.</p> </li> <li> <p>When containers are built,   they are build by assembling an OCI-compliant image   (TAR files per each layer plus a JSON manifest),   without resorting to privileged daemons like that of Docker.   They are generated as any other build (hermetic, pure, etc)   using information from the Nix Store.</p> </li> </ul>"},{"location":"security/design-principles/#fail-safe-defaults","title":"Fail-Safe Defaults","text":"<ul> <li>By default, builds are run in a sandbox   that uses kernel namespaces   to prevent the build from accessing the network   and the external file system.</li> </ul> <p>The user is given the option to opt-out from this behavior,   but this is enabled by default.</p> <ul> <li>Generated files are created inside user-owned folders by default,   which inherit the security   that the user has previously defined for the directory.</li> </ul> <p>An user may opt-out from this behavior by setting environment variables,   but user-owned folders are selected by default.</p> <ul> <li>In the most common configuration,   the contents of the <code>/nix/store</code>   are never published to the internet.</li> </ul> <p>A user may want to share artifacts with other users   in order to improve performance   by writing artifacts to a binary cache,   so that other users can download the artifacts   if they have already been built by other user,   but this behavior   requires configuring a read+write binary cache   and setting the corresponding access secret.</p> <p>A read-only binary cache (https://cache.nixos.org)   and no write binary cache   is the default configuration,</p>"},{"location":"security/design-principles/#economy-of-mechanism","title":"Economy of Mechanism","text":"<ul> <li>The Makes CLI is essentially a wrapper over Nix,   so the surface is as small as possible (~1000 loc).</li> <li>The Makes Framework defines a common set of utilities   a user can opt-in to use,   saving the user the work of writing that functionality themselves   which would require the same amount of code anyway.</li> </ul>"},{"location":"security/design-principles/#complete-mediation","title":"Complete Mediation","text":""},{"location":"security/design-principles/#open-design","title":"Open Design","text":"<ul> <li>Makes is Free and Open Source Software,     anyone can read its internals:     https://github.com/fluidattacks/makes</li> </ul>"},{"location":"security/design-principles/#separation-of-privilege","title":"Separation of Privilege","text":""},{"location":"security/design-principles/#least-common-mechanism","title":"Least Common Mechanism","text":"<ul> <li>In the most common case     each user of Makes has a personal <code>/nix/store</code>     and a personal installation of Nix.     The <code>/nix/store</code> contents are not shared between users by default,     unless the user configures a read+write binary cache     and sets the corresponding binary cache secret.</li> </ul>"},{"location":"security/design-principles/#psychological-acceptability","title":"Psychological Acceptability","text":"<ul> <li>The Makes CLI is easy to use.     Performing an installation using the default values     yields a sufficiently secure version of the system.     Users familiar with other build tools would feel at home.</li> </ul>"},{"location":"security/slsa/","title":"Supply Chain Levels for Software Artifacts","text":"<p>The SLSA framework helps organizations measure the level of assurance that the Software Artifacts they produce actually contain and use what they intended (integrity), by ensuring that the whole build and release process, and all of the involved sources and dependencies cannot be tampered with.</p> <p>In this document, we use the version 0.1 of the specification.</p> <p>Our current SLSA level is 2. The following is a detail of the levels achieved on each of the requirements:</p> Requirement Level Source - Version Controlled 4 Source - Verified History 4 Source - Retained Indefinitely 4 Source - Two Person Reviewed 3 Build - Scripted Build 4 Build - Build Service 4 Build - Build As Code 4 Build - Ephemeral Environment 4 Build - Isolated 2 Build - Parameter-less 4 Build - Hermetic 4 Build - Reproducible 4 Provenance - Available 4 Provenance - Authenticated 4 Provenance - Service Generated 4 Provenance - Non-Falsifiable 4 Provenance - Dependencies Complete 4 Common - Security 4 Common - Access 4 Common - Superusers 3 <p>For clarity, this is how SLSA definitions map into our infrastructure:</p> <ul> <li>Source: Git repository at:     github.com/fluidattacks/makes.</li> <li>Platform: GitHub Actions,     Makes,     and the Nix package manager.</li> <li>Build service:     GitHub Actions,     using GitHub hosted runners.</li> <li>Build: A Nix derivation.</li> <li>Environment: A sandbox     that Chroots     into an empty temporary directory,     provides private versions     of <code>/proc</code>, <code>/dev</code>, <code>/dev/shm</code>, and <code>/dev/pts</code>,     and uses a private PID, mount, network, IPC, and UTS namespace     to isolate itself from other processes in the system.</li> <li>Steps: Instructions declared     in the corresponding Makes configuration files     written using the Nix programming language     and shell scripting, versioned as-code in the source.</li> </ul>"},{"location":"security/slsa/#source-requirements","title":"Source Requirements","text":""},{"location":"security/slsa/#version-controlled","title":"Version controlled","text":"<p>Every change to the source is tracked on GitHub, using the Git version control system.</p> <ul> <li> <p>Change history: There exists a record     of the history of changes     that went into the revision.     Each change contains:     the identities of the uploader and reviewers (if any),     timestamps of the reviews (if any) and submission,     the change description/justification,     the content of the change,     and the parent revisions.</p> <p>For example: PR 649.</p> </li> <li> <p>Immutable reference:     There exists a way to indefinitely reference a particular,     immutable revision.     For example:     c61feb1be11abc4d7ffed52c660a45c57f06599c.</p> </li> </ul>"},{"location":"security/slsa/#verified-history","title":"Verified history","text":"<p>Every change in the revision\u2019s history need to pass through a Pull Request.</p> <p>In order to approve a Pull Request the reviewer need to be strongly authenticated into GitHub. The authentication process requires 2FA, and the dates of the change are recorded in the Pull Request.</p> <p>Only users who were previously granted access by a platform Admin can review Pull Requests. External contributors can create a Pull Request without any special privileges, but it won't be merged until reviewers submit their approval.</p> <p>For example: PR 649.</p>"},{"location":"security/slsa/#retained-indefinitely","title":"Retained indefinitely","text":"<p>The revision and its change history are preserved indefinitely and cannot be deleted or modified (not even with multi-party approval). Additionally, the main branch is protected against accidental history overwrite using GitHub's branch protection rules.</p> <p>At the moment, no legal requirement impedes us to preserve indefinitely our change history, and no obliteration policy is in effect. In fact, our source code is Free and Open Source Software: Anyone can download or fork the repository.</p>"},{"location":"security/slsa/#two-person-reviewed","title":"Two Person Reviewed","text":"<p>Every change in the revision\u2019s history is agreed to by at least one trusted person prior to submission and each of these trusted persons are authenticated into the platform (using 2FA) first. Only project maintainers can merge Pull Requests and therefore append a change into the revision's history.</p>"},{"location":"security/slsa/#build-requirements","title":"Build Requirements","text":""},{"location":"security/slsa/#scripted-build","title":"Scripted Build","text":"<p>All build steps were fully defined using GitHub Actions, Makes and Nix.</p> <p>Manual commands are not necessary to invoke the build script. A new build is triggered automatically each time new changes are pushed to the repository.</p> <p>For example:</p> <ul> <li>.github/workflows/prod.yml</li> <li>makes/cli/pypi/main.nix</li> </ul>"},{"location":"security/slsa/#build-service","title":"Build Service","text":"<p>All build steps run on GitHub Actions using GitHub hosted runners.</p> <p>For example:</p> <ul> <li>Actions tab</li> </ul>"},{"location":"security/slsa/#build-as-code","title":"Build As Code","text":"<p>All build steps have been stored and versioned in the Git Repository.</p> <p>For example:</p> <ul> <li>.github/workflows</li> </ul>"},{"location":"security/slsa/#ephemeral-environment","title":"Ephemeral Environment","text":"<p>According to the GitHub Actions documentation,</p> <ul> <li>\"Each GitHub-hosted runner     is a new virtual machine (VM)     hosted by GitHub with the runner application     and other tools preinstalled.\"</li> <li>\"When the job begins,     GitHub automatically provisions a new VM for that job.     All steps in the job execute on the VM,     allowing the steps in that job to share information     using the runner's filesystem.     You can run workflows directly on the VM     or in a Docker container.     When the job has finished,     the VM is automatically decommissioned.\"</li> </ul> <p>Additionally, the Nix package manager provides an ephemeral environment to each of the derivations. On Linux, the environment is a sandbox that Chroots into an empty temporary directory, provides private versions of <code>/proc</code>, <code>/dev</code>, <code>/dev/shm</code>, and <code>/dev/pts</code>, and uses a private PID, mount, network, IPC, and UTS namespace to isolate itself from other processes in the system.</p>"},{"location":"security/slsa/#isolated","title":"Isolated","text":"<p>Our build service ensures that the build steps run in an isolated environment free of influence from other build instances, whether prior or concurrent, by using containerization technologies.</p> <p>Builds are executed using the Nix package manager, which prevents builds from accessing any external environment variables, network resources, sockets, or paths in the file system. and provides private versions of <code>/proc</code>, <code>/dev</code>, <code>/dev/shm</code>, and <code>/dev/pts</code>, and uses a private PID, mount, network, IPC, and UTS namespace to isolate the build from other builds happening concurrently in the system.</p> <p>Input-addressed build caches are used to speed-up the pipeline.</p>"},{"location":"security/slsa/#parameter-less","title":"Parameter-less","text":"<p>The build output cannot be affected by user parameters other than the build entry point and the top-level source location.</p> <p>In order to modify the build output, a change to the source code must happen first.</p>"},{"location":"security/slsa/#hermetic","title":"Hermetic","text":"<p>Builds are executed using the Nix package manager, which prevents builds from accessing any external environment variables, network resources, sockets, or paths in the file system.</p> <p>All transitive build steps, sources, and dependencies are fully declared up front with immutable references.</p> <p>For example:</p> <ul> <li>makes/cli/pypi/pypi-sources.yaml.</li> </ul> <p>The Nix package manager:</p> <ul> <li>Fetches all of the declared artifacts     into a trusted control plane (the /nix/store).</li> <li>Mounts into the build sandbox     the specific /nix/store paths required by it.</li> <li>Allows a build to fetch artifacts over the network     if and only if the expected artifact integrity is specified.</li> <li>Validates the integrity of each artifact     before allowing a build to use it,     and fails the build if the verification fails.</li> <li>Denies network connectivity if no expected hash is specified.</li> </ul>"},{"location":"security/slsa/#reproducible","title":"Reproducible","text":"<p>All of our build scripts are intended to be reproducible.</p> <p>The reproducibility guarantees of our build scripts are that of the Nix package manager.</p>"},{"location":"security/slsa/#provenance-requirements","title":"Provenance Requirements","text":""},{"location":"security/slsa/#available","title":"Available","text":"<p>Provenance is produced by Makes, and exposed by the build service as a JSON document together with the artifacts produced by the build.</p> <p>Only builds that produce artifacts generate provenance, because if a build does not produce artifacts, then there wouldn't be something to verify the provenance of.</p>"},{"location":"security/slsa/#authenticated","title":"Authenticated","text":"<p>The authenticity of the provenance comes from the fact that it can be downloaded from the build service itself, and therefore the authenticity claim is as strong as the Build and Source Requirements are secure.</p> <p>The integrity of the provenance is displayed in the logs and generated by Makes.</p>"},{"location":"security/slsa/#service-generated","title":"Service Generated","text":"<p>The data in the provenance is exposed by the build service, and is generated by Makes.</p> <p>Regular users of the service are not able to inject or alter the contents because a build is fully determined and automated by its configuration, and the configuration comes directly from the source.</p>"},{"location":"security/slsa/#non-falsifiable","title":"Non-Falsifiable","text":"<p>The provenance cannot be falsified by the build service's users:</p> <ul> <li>There is no secret material     to demonstrate the non-falsifiable nature of the provenance     (see Provenance - Authenticated).</li> <li>Even if such secret material existed,     builds are run in an hermetic environment,     and therefore they wouldn't be available to the build steps     (see Build - Hermetic).</li> <li>Every field in the provenance is generated     by the build service in a trusted control plane,     which is fully defined by the build configuration,     which comes directly from the Source,     and therefore is as secure as the Source is     (see Source - Verified History).</li> </ul>"},{"location":"security/slsa/#dependencies-complete","title":"Dependencies Complete","text":"<p>The provenance contains all of dependencies that were available while running the build steps.</p> <p>This is guaranteed by the fact that builds are hermetic (see Build - Hermetic). So for a build to succeed, all of its dependencies must be declared, and therefore the build tool (Makes and Nix) who fetched them at build time, have strong knowledge of their existence.</p>"},{"location":"security/slsa/#common-requirements","title":"Common Requirements","text":""},{"location":"security/slsa/#security","title":"Security","text":"<p>Please read the Security page.</p>"},{"location":"security/slsa/#access","title":"Access","text":"<p>Our build service (GitHub Actions) is SaaS, and we use GitHub hosted runners. Only some GitHub employees may have access to the runners. We cannot access the build service infrastructure physically nor remotely.</p>"},{"location":"security/slsa/#superusers","title":"Superusers","text":"<p>Only a small number of platform admins may override the guarantees provided by SLSA. Particularly through disabling security options in the repository configuration page. Doing so does not currently require approval of a second platform admin.</p>"},{"location":"security/threat-model/","title":"Threat Model","text":""},{"location":"security/threat-model/#spoofing","title":"Spoofing","text":"<ul> <li> <p>A user can mistype the Makes installation command     and wrongly install a different (potentially malicious) tool.</p> <p>Mitigation:</p> <ul> <li>The installation command is given in plain-text,     users can copy-paste it to avoid typos.</li> </ul> </li> <li> <p>A user can mistype the target project to be built with Makes,     and end-up building (and potentially running)     a different (potentially malicious) project.</p> <p>Mitigation:</p> <ul> <li>The most common use case     (running makes on the project in the current working directory)     has a very convenient syntax: <code>$ m .</code>,     which is very unlikely to be mistyped.</li> <li>When referencing a project over the internet,     the user is forced to use a git provider (github/gitlab),     the owner account (which should be trusted by the user),     the target repository,     and a branch, commit or tag.</li> </ul> <p>By using a commit, the user can force the integrity of the downloaded data to match what they expect.</p> </li> </ul>"},{"location":"security/threat-model/#tampering","title":"Tampering","text":"<ul> <li> <p>The Nix Store can be tampered with     if no good installation measures are taken by the user.</p> <p>Mitigation:</p> <ul> <li>The Nix installation is responsibility of the user,     but in general,     a user could bind mount <code>/nix</code> as a read-only file system,     and make the <code>/nix/store</code> only accessible by root     and the <code>nixbld</code> group users,     reducing an attack vector to the physical or local layer,     which can be further protected     by the use of frameworks like SLSA,     and full disk encryption using LUKS.</li> </ul> </li> </ul>"},{"location":"security/threat-model/#repudiation","title":"Repudiation","text":"<ul> <li> <p>In single tenant setups,     for instance when developers run Makes in their laptops,     there is nothing to repudiate,     there is only one user performing builds (the developer).     However,     in multi-tenant setups,     for instance when Makes is run in a shared CI/CD system,     a user could deny running a build.</p> <p>Mitigation:</p> <ul> <li>Makes produces     SLSA Provenance Attestations,     which identify the builder and the built artifact.</li> <li>Most CI/CD systems     (and particularly the ones supported by Makes)     offer logs collection,     so it would be easy to associate a build     with the identity that triggered it.     It is responsibility of the users     to configure such CI/CD systems     in a secure way and to protect (and backup) the logs.</li> </ul> </li> </ul>"},{"location":"security/threat-model/#information-disclosure","title":"Information Disclosure","text":"<ul> <li> <p>Although the <code>/nix/store</code> is individual per user,     a user may write secrets to it,     and then those secrets can be published to a binary cache     that is publicly accessible.</p> <p>Examples of this include Nix idioms like:</p> <pre><code>[\n// Nix would load the secrets in plain-text to the `/nix/store`\n./file-with-secrets-in-plain-text.txt\n// Nix would load the git repository to the `/nix/store`\n// This also applies to other builtins.fetch* that could\n  // fetch private information\n  (builtins.fetchGit {\n// Private repository (with potential intellectual property)\nurl = \"git@github.com:company/secrets.git\";\n})\n]\n</code></pre> <p>Mitigation:</p> <ul> <li>Nothing from the <code>/nix/store</code>     is pushed to a binary cache by default.     A user would need to configure the cache explicitly,     and expose the corresponding secret     in an environment variable.</li> <li>Makes has support for binary caches     that require a secret for reading and writting,     so a user may chose to use this instead     as an extra layer of prevention     if loading secrets to the <code>/nix/store</code> is mandatory.     Please see https://cachix.org/ for more information.</li> <li> <p>Makes has utilities for working with secrets in a way     that they are only copied to the <code>/nix/store</code>     in encrypted form,     and then decrypted at runtime,     where there are safe from disclosure.</p> <p>For example: <code>secretsForAwsFromEnv</code>, <code>secretsForAwsFromGitlab</code>, <code>secretsForEnvFromSops</code>, <code>secretsForGpgFromEnv</code>, <code>secretsForKubernetesConfigFromAws</code>, and <code>secretsForTerraformFromEnv</code>.</p> <p>However, we don't currently have a way to protect the user from using <code>builtins.fetch*</code>. If your workflow needs this, please avoid pushing artifacts to a public binary cache, or use a private binary cache instead.</p> </li> <li> <p>Makes copies the contents of the git repository     into a trusted control plane,     and excludes all of the files     that are not tracked by Git     from this checkout.     This means that if the file with secrets is inside the repository,     but included in the <code>.gitignore</code>     such that a <code>git fetch</code> of the given remote and revision     would ignore it,     Makes would not copy it into the trusted control plane,     and therefore Nix wouldn't load it into the <code>/nix/store</code>.</p> </li> </ul> </li> </ul>"},{"location":"security/threat-model/#denial-of-service","title":"Denial of Service","text":"<p>WIP</p>"},{"location":"security/threat-model/#elevation-of-privileges","title":"Elevation of Privileges","text":"<p>WIP</p>"}]}